# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Scripts, functions and routines to (enable) search for UV emission lines in MUSE data
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
import pdb
import os
import commands
import sys
import glob
import MiGs
import pyfits
import datetime
import numpy as np
import shutil
import fits2ascii as f2a
import MUSEWideUtilities as mu
import kbsutilities as kbs
import tdose_utilities as tu
import uvEmissionlineSearch as uves
import ciiiEmitterCandidates as cec
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
def build_LAEfitstable(fitsname='./LAEinfo.fits',genDS9region=True,clobber=False,verbose=True):
    """
    Building a fits table containing information on the sources.
    Generated by combining multiple sources of information.

    --- INPUT ---

    --- EXAMPLE OF USE ---
    import uvEmissionlineSearch as uves
    uves.build_LAEfitstable(clobber=True)

    """
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    if verbose: print ' - Loading fits catalogs for LAEs:'
    catPSF      = '/Users/kschmidt/work/catalogs/MUSE_GTO/psf_all_Converted_cleaned.fits'
    catE24eltab = '/Users/kschmidt/work/catalogs/MUSE_GTO/MW_1-24_emline_table_v3.2.fits'
    catE24main  = '/Users/kschmidt/work/catalogs/MUSE_GTO/MW_1-24_main_table_v3.2.fits'
    catE36      = '/Users/kschmidt/work/catalogs/MUSE_GTO/merged_catalog_e36_v1.0.fits'

    if verbose: print '   '+catPSF
    datPSF      = pyfits.open(catPSF)[1].data
    if verbose: print '   Columns: '+str(datPSF.dtype.names)+'\n'

    if verbose: print '   '+catE24eltab
    datE24eltab = pyfits.open(catE24eltab)[1].data
    if verbose: print '   Columns: '+str(datE24eltab.dtype.names)+'\n'

    if verbose: print '   '+catE24main
    datE24main  = pyfits.open(catE24main)[1].data
    if verbose: print '   Columns: '+str(datE24main.dtype.names)+'\n'

    if verbose: print '   '+catE36
    datE36      = pyfits.open(catE36)[1].data
    if verbose: print '   Columns: '+str(datE36.dtype.names)+'\n'

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    if verbose: print ' - Counting LAEs and putting together ID list'
    e24_ids  = datE24main['UNIQUE_ID']
    e36_ids  = datE36['ID']
    objids   = []
    # - - - - - - - - - - - - - E24 - - - - - - - - - - - - - -
    for ii,id in enumerate(e24_ids):
        if datE24main['Z'][ii] > 2.7:
            objids.append( id )
    # - - - - - - - - - - - - - E36 - - - - - - - - - - - - - -
    for ii,id in enumerate(e36_ids):
        if datE36['REDSHIFT'][ii] > 2.7:
            objids.append( id )
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    objids = np.sort(np.asarray(objids).astype(int))
    NLAEs  = len(objids)
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    if verbose: print ' - Assembling info for the '+str(NLAEs)+' LAEs found'
    redshifts = []
    ras       = []
    decs      = []
    pointing  = []
    x_image   = []
    y_image   = []


    for ii,id in enumerate(objids):
        if verbose:
            infostr = '   Getting inf for '+str(id)+' ('+str("%.5d" % ii)+' / '+str("%.5d" % NLAEs)+')'
            sys.stdout.write("%s\r" % infostr)
            sys.stdout.flush()
        pointingname = mu.gen_pointingname(id)
        pointing.append(pointingname)

        if str(id) in e24_ids:
            objent = np.where(datE24main['UNIQUE_ID'] == str(id))[0]
            redshifts.append(datE24main['Z'][objent][0])
            ras.append(datE24main['RA'][objent][0])
            decs.append(datE24main['DEC'][objent][0])
            ximg, yimg = mu.get_pixelpos(datE24main['RA'][objent],datE24main['DEC'][objent],pointingname,pixorigin=0,
                                         imgdir='/Users/kschmidt/work/images_MAST/MUSEWidePointings/',imgext=0,verbose=False)
            x_image.append(ximg)
            y_image.append(yimg)

        elif id in e36_ids:
            objent = np.where(datE36['ID'] == id)[0]
            redshifts.append(datE36['REDSHIFT'][objent][0])
            ras.append(datE36['RA'][objent][0])
            decs.append(datE36['DEC'][objent][0])
            ximg, yimg = mu.get_pixelpos(datE36['RA'][objent],datE36['DEC'][objent],pointingname,
                                         imgdir='/Users/kschmidt/work/images_MAST/MUSEWidePointings/',imgext=0,verbose=False)
            x_image.append(ximg)
            y_image.append(yimg)

        else:
            sys.exit('Weird... ID not found in E24 or E36 id-list...')
    if verbose: print '\n   done...'

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    if verbose: print ' - Defining fits table and filling it with data'
    c1 = pyfits.Column(name='id', format='J', unit='', array=objids)
    c2 = pyfits.Column(name='pointing', format='A30', unit='', array=pointing)
    c3 = pyfits.Column(name='ra', format='D', unit='DEF', array=ras)
    c4 = pyfits.Column(name='dec', format='D', unit='DEG', array=decs)
    c5 = pyfits.Column(name='redshift', format='D', unit='', array=redshifts)
    c6 = pyfits.Column(name='x_image_F814W', format='D', unit='PIXEL', array=x_image)
    c7 = pyfits.Column(name='y_image_F814W', format='D', unit='PIXEL', array=y_image)

    coldefs = pyfits.ColDefs([c1,c2,c3,c4,c5,c6,c7])
    th      = pyfits.new_table(coldefs) # creating default header

    # writing hdrkeys:'---KEY--',                             '----------------MAX LENGTH COMMENT-------------'
    #th.header.append(('MAG     ' , spec2D[0].header['MAG']   ,'MAG_AUTO from interlaced catalog'),end=True)

    head    = th.header
    tbHDU   = pyfits.new_table(coldefs, header=head)
    tbHDU.writeto(fitsname, clobber=clobber)
    if verbose: print '   Fits table stored in \n   '+fitsname

    if genDS9region:
        if verbose: print ' - Generating DS9 region file'
        regionname = fitsname.replace('.fits','.reg')
        kbs.create_DS9region(regionname,ras,decs,color='magenta',circlesize=0.5,textlist=objids.astype(str),clobber=clobber)

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
def gen_LAEsourceCats(outputdir,sourcecatalog,verbose=True):
    """
    Generating MUSE-Wide poitning source catalogs for TDOSE extraction of LAEs

    --- INPUT ---

    --- EXAMPLE OF USE ---
    import uvEmissionlineSearch as uves
    uves.gen_LAEsourceCats('/Users/kschmidt/work/MUSE/uvEmissionlineSearch/tdose_sourcecats/','/Users/kschmidt/work/MUSE/uvEmissionlineSearch/LAEinfo.fits')

    """
    sourcetab = pyfits.open(sourcecatalog)[1].data
    pointings = np.unique(np.sort(sourcetab['pointing']))

    for pp, pointing in enumerate(pointings):
        objents     = np.where(sourcetab['pointing'] == pointing)[0]
        pointingcat = outputdir+'tdose_sourcecat_LAEs_'+pointing+'.txt'
        fout = open(pointingcat,'w')
        fout.write('# TDOSE Source catalog generated with uvEmissionlineSearch.gen_LAEsourceCats() \n')
        fout.write('# \n')
        fout.write('# parent_id id ra dec x_image y_image fluxscale \n')

        # if '02' in pointing:        pdb.set_trace()

        for objent in objents:
            objstr = ' -99  '

            objstr = objstr + str(sourcetab['ID'][objent]) + ' '
            objstr = objstr + str(sourcetab['RA'][objent]) + ' '
            objstr = objstr + str(sourcetab['DEC'][objent]) + ' '
            objstr = objstr + str(sourcetab['x_image_F814W'][objent]) + ' '
            objstr = objstr + str(sourcetab['y_image_F814W'][objent]) + ' '
            objstr = objstr + ' 1.0000 ' + ' \n'

            fout.write(objstr)
        fout.close()

        pointingcat_fits = f2a.ascii2fits(pointingcat,asciinames=True,skip_header=2,fitsformat='D',verbose=verbose)

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
def gen_TDOSEsetupfiles(infofile,namebase='MUSEWide_tdose_setup_LAEs',clobber=False,
                        outputdir='/Users/kschmidt/work/MUSE/uvEmissionlineSearch/tdose_setupfiles/',verbose=True):
    """
    Generating MUSE-Wide poitning source catalogs for TDOSE extraction of LAEs

    --- INPUT ---

    --- EXAMPLE OF USE ---
    import uvEmissionlineSearch as uves
    infofile = '/Users/kschmidt/work/MUSE/uvEmissionlineSearch/tdose_setupfiles/MUSEWide_infofile_arche_PSFupdate_LAEs.txt'
    uves.gen_TDOSEsetupfiles(infofile)

    """
    tu.duplicate_setup_template(outputdir,infofile,namebase=namebase,clobber=clobber,loopcols='all',infofmt="S250",infohdr=2)

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
def rename_models(outputdir,sourcecatalog,cutoutsize=[2.0,2.0],clobber=False,
                  modeldir='/Users/kschmidt/work/MUSE/uvEmissionlineSearch/imgblocks_josieGALFITmodels/',verbose=True):
    """
    Extracting spectra of LAEs using TDOSE (https://github.com/kasperschmidt/TDOSE)

    --- INPUT ---

    --- EXAMPLE OF USE ---
    import uvEmissionlineSearch as uves
    outputdir     = '/Users/kschmidt/work/MUSE/uvEmissionlineSearch/ref_image_galfit_models/'
    sourcecatalog = '/Users/kschmidt/work/MUSE/uvEmissionlineSearch/LAEinfo.fits'
    uves.rename_models(outputdir,sourcecatalog,cutoutsize=[2.0,2.0],clobber=False)
    """
    modelfiles = glob.glob(modeldir+'/imgblock*.fits')
    sourcetab  = pyfits.open(sourcecatalog)[1].data
    if verbose: print ' - Found '+str(len(modelfiles))+' in modeldir to rename '

    for oldname in modelfiles:
        id     = oldname.split('/')[-1].split('_')[-1].split('.fit')[0]
        objent = np.where(sourcetab['id'] == int(id))[0]

        if len(objent) != 1:
            print ' - No match in sourcecatalog to object '+id
        else:
            pointing = sourcetab['pointing'][objent][0]

            if cutoutsize is None:
                cutoutstr = ''
            else:
                cutoutstr = ('_id'+str("%.10d" % float(id))+'_cutout'+str(cutoutsize[0])+
                             'x'+str(cutoutsize[1])+'arcsec').replace('.','p')

            newname = outputdir+'model_acs_814w_'+pointing+'_cut_v1.0'+cutoutstr+'.fits'

            if os.path.isfile(newname) & (clobber == False):
                print ' - Clobber = False and '+newname+' already exists so no new copy made. Moving on'
            else:
                if verbose: print ' - Copying '+oldname+' to '+newname
                shutil.copy(oldname,newname)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
def run_TDOSEextraction(verbose=True):
    """
    Command (to copy-paste into arche) to run TDOSE on setup files generated with uves.gen_TDOSEsetupfiles()

    --- INPUT ---

    --- EXAMPLE OF USE ---

    """
    #mkdir tdose_models, tdose_cutouts, tdose_spectra
    #nice ipython
    import tdose, glob
    import numpy as np
    Nsessions = 30

    setupfiles = glob.glob('/store/data/musewide/TDOSE/tdose_setupfiles/MUSEWide_tdose_setup_LAEs_candels-*.txt')

    bundles, paralleldic = tdose.perform_extractions_in_parallel(setupfiles,Nsessions=Nsessions,clobber=True,performcutout=True,store1Dspectra=True,plot1Dspectra=True,generateFullFoVmodel=True,generateOverviewPlots=True,skipextractedobjects=True,logterminaloutput=True)

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
def launch_MiG(verbose=True):
    """
    Launching the MUSE inspection GUI to look manually search the MUSE data

    --- INPUT ---

    --- EXAMPLE OF USE ---

    """
    print ' under construction'



# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =