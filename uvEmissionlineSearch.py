# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Scripts, functions and routines to (enable) search for UV emission lines in MUSE data
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
import pdb
import os
import commands
import sys
import glob
import MiGs
import pyfits
import datetime
import numpy as np
import shutil
import fits2ascii as f2a
import MUSEWideUtilities as mu
import kbsutilities as kbs
import tdose_utilities as tu
from astropy import wcs
import uvEmissionlineSearch as uves
import ciiiEmitterCandidates as cec
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
def buildANDgenerate(clobber=True):
    """
    Convenience wrapper to build and generate all the files needed for the TDOSE run

    --- EXAMPLE OF USE ---
    import uvEmissionlineSearch as uves
    uves.buildANDgenerate()

    """
    LAEinfofile = '/Users/kschmidt/work/MUSE/uvEmissionlineSearch/LAEinfo.fits'
    uves.build_LAEfitstable(fitsname=LAEinfofile,clobber=clobber)

    sourcecatdir = '/Users/kschmidt/work/MUSE/uvEmissionlineSearch/tdose_sourcecats/'
    uves.gen_LAEsourceCats(sourcecatdir,LAEinfofile,modelcoord=True)

    SETUPinfofile = '/Users/kschmidt/work/MUSE/uvEmissionlineSearch/tdose_setupfiles/MUSEWide_infofile_arche_PSFupdate_LAEs.txt'
    uves.gen_TDOSEsetupfiles(SETUPinfofile,clobber=clobber)

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
def run_TDOSEextraction():
    """
    Command (to copy-paste into arche) to run TDOSE on setup files generated with uves.gen_TDOSEsetupfiles()

    --- EXAMPLE OF USE ---
    copy-past into Max terminal (for copying over files to arche) and on arche (for running TDOSE)

    """
    # ---------------------------- Copying over files from Mac ----------------------------
    # scp /Users/kschmidt/work/MUSE/uvEmissionlineSearch/ref_image_galfit_models/*.fits kasper@arche.aip.de:/store/data/musewide/TDOSE/ref_image_galfit_models/

    # scp /Users/kschmidt/work/MUSE/uvEmissionlineSearch/tdose_setupfiles/*candels*.txt kasper@arche.aip.de:/store/data/musewide/TDOSE/tdose_setupfiles/

    # scp /Users/kschmidt/work/MUSE/uvEmissionlineSearch/tdose_sourcecats/*.fits kasper@arche.aip.de:/store/data/musewide/TDOSE/tdose_sourcecats/

    # ------------------------ Running TDOSE on Arche - FewFileRun ------------------------
    # mkdir tdose_models tdose_cutouts tdose_spectra
    # ur_setup
    # ipython
    import tdose, glob
    import numpy as np
    Nsessions = 1

    setupfiles = [glob.glob('/store/data/musewide/TDOSE/tdose_setupfiles/MUSEWide_tdose_setup_LAEs_candels-*.txt')[0]] # COSMOS 06
    setupfiles = [glob.glob('/store/data/musewide/TDOSE/tdose_setupfiles/MUSEWide_tdose_setup_LAEs_candels-*.txt')[1]] # CDFS 01

    bundles, paralleldic = tdose.perform_extractions_in_parallel(setupfiles,Nsessions=Nsessions,clobber=True,performcutout=True,store1Dspectra=True,plot1Dspectra=True,generateFullFoVmodel=True,generateOverviewPlots=True,skipextractedobjects=False,logterminaloutput=True,verbosePE=True,verbosefull=True)

    # -------------------------- Running TDOSE on Arche - Full Run -------------------------
    # mkdir tdose_models, tdose_cutouts, tdose_spectra
    # ur_setup
    # nice ipython
    import tdose, glob
    import numpy as np
    Nsessions = 30

    setupfiles = glob.glob('/store/data/musewide/TDOSE/tdose_setupfiles/MUSEWide_tdose_setup_LAEs_candels-*.txt')

    bundles, paralleldic = tdose.perform_extractions_in_parallel(setupfiles,Nsessions=Nsessions,clobber=True,performcutout=True,store1Dspectra=True,plot1Dspectra=True,generateFullFoVmodel=True,generateOverviewPlots=True,skipextractedobjects=True,logterminaloutput=True)

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
def build_LAEfitstable(fitsname='./LAEinfo.fits',genDS9region=True,clobber=False,verbose=True):
    """
    Building a fits table containing information on the sources.
    Generated by combining multiple sources of information.

    --- INPUT ---

    --- EXAMPLE OF USE ---
    import uvEmissionlineSearch as uves
    uves.build_LAEfitstable(clobber=True)

    """
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    if verbose: print ' - Loading fits catalogs for LAEs:'
    catPSF      = '/Users/kschmidt/work/catalogs/MUSE_GTO/psf_all_Converted_cleaned.fits'
    catE24eltab = '/Users/kschmidt/work/catalogs/MUSE_GTO/MW_1-24_emline_table_v3.2.fits'
    catE24main  = '/Users/kschmidt/work/catalogs/MUSE_GTO/MW_1-24_main_table_v3.2.fits'
    catE36      = '/Users/kschmidt/work/catalogs/MUSE_GTO/merged_catalog_e36_v1.0.fits'

    if verbose: print '   '+catPSF
    datPSF      = pyfits.open(catPSF)[1].data
    if verbose: print '   Columns: '+str(datPSF.dtype.names)+'\n'

    if verbose: print '   '+catE24eltab
    datE24eltab = pyfits.open(catE24eltab)[1].data
    if verbose: print '   Columns: '+str(datE24eltab.dtype.names)+'\n'

    if verbose: print '   '+catE24main
    datE24main  = pyfits.open(catE24main)[1].data
    if verbose: print '   Columns: '+str(datE24main.dtype.names)+'\n'

    if verbose: print '   '+catE36
    datE36      = pyfits.open(catE36)[1].data
    if verbose: print '   Columns: '+str(datE36.dtype.names)+'\n'

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    if verbose: print ' - Counting LAEs and putting together ID list'
    e24_ids  = datE24main['UNIQUE_ID']
    e36_ids  = datE36['ID']
    objids   = []
    # - - - - - - - - - - - - - E24 - - - - - - - - - - - - - -
    for ii,id in enumerate(e24_ids):
        if datE24main['Z'][ii] > 2.7:
            objids.append( id )
    # - - - - - - - - - - - - - E36 - - - - - - - - - - - - - -
    for ii,id in enumerate(e36_ids):
        if datE36['REDSHIFT'][ii] > 2.7:
            objids.append( id )
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    objids = np.sort(np.asarray(objids).astype(int))
    NLAEs  = len(objids)
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    if verbose: print ' - Assembling info for the '+str(NLAEs)+' LAEs found'
    galfitmodeldir  = '/Users/kschmidt/work/MUSE/uvEmissionlineSearch/imgblocks_josieGALFITmodels/'
    redshifts       = []
    ras             = []
    decs            = []
    pointing        = []
    x_image         = []
    y_image         = []
    name_model      = []
    N_model_comp    = []
    ras_model       = []
    decs_model      = []
    delta_coords    = []
    x_image_model   = []
    y_image_model   = []

    for ii,id in enumerate(objids): #enumerate([206004030,101005016]):
        if verbose:
            infostr = '   Getting info for '+str(id)+' ('+str("%.5d" % ii)+' / '+str("%.5d" % NLAEs)+')  '
            if verbose: print '\n'+infostr,
            # sys.stdout.write("%s\r" % infostr)
            # sys.stdout.flush()
        pointingname = mu.gen_pointingname(id)
        pointing.append(pointingname)

        # - - - - - - - - - - GET LSDCAT COORDINATES - - - - - - - - - -
        if str(id) in e24_ids:
            objent = np.where(datE24main['UNIQUE_ID'] == str(id))[0]
            redshifts.append(datE24main['Z'][objent][0])
            ras.append(datE24main['RA'][objent][0])
            decs.append(datE24main['DEC'][objent][0])
            ximg, yimg = mu.get_pixelpos(datE24main['RA'][objent],datE24main['DEC'][objent],pointingname,pixorigin=0,
                                         imgdir='/Users/kschmidt/work/images_MAST/MUSEWidePointings/',imgext=0,verbose=False)
            x_image.append(ximg)
            y_image.append(yimg)

        elif id in e36_ids:
            objent = np.where(datE36['ID'] == id)[0]
            redshifts.append(datE36['REDSHIFT'][objent][0])
            ras.append(datE36['RA'][objent][0])
            decs.append(datE36['DEC'][objent][0])
            ximg, yimg = mu.get_pixelpos(datE36['RA'][objent],datE36['DEC'][objent],pointingname,
                                         imgdir='/Users/kschmidt/work/images_MAST/MUSEWidePointings/',imgext=0,verbose=False)
            x_image.append(ximg)
            y_image.append(yimg)

        else:
            sys.exit('Weird... ID not found in E24 or E36 id-list...')
        # - - - - - - - - - - GET MODEL COORDINATES - - - - - - - - - -
        modelfile = glob.glob(galfitmodeldir+'imgblock_'+str("%.9d" % id)+'.fits')

        if len(modelfile) == 0:
            if verbose: print 'No model found; ',
            name_model.append("NoModelFoundIn_"+galfitmodeldir)
            N_model_comp.append(0)
            ras_model.append(0)
            decs_model.append(0)
            delta_coords.append(0)
            x_image_model.append(0)
            y_image_model.append(0)
        elif len(modelfile) > 1:
            sys.exit('Found more than one model file for '+str("%.9d" % id)+'; Found the models '+modelfile)
        else:
            refimg_hdr  = pyfits.open(modelfile[0])[1].header
            model_hdr   = pyfits.open(modelfile[0])[2].header
            comps       = []
            for hdrkey in model_hdr.keys():
                if ('COMP_' in hdrkey) & (model_hdr[hdrkey] != 'sky'):
                    comps.append(hdrkey)

            imgwcs      = wcs.WCS(tu.strip_header(refimg_hdr.copy()))

            pix_based_on_model = False
            if pix_based_on_model:
                xstr        = model_hdr['1_XC'].split(' ')
                ystr        = model_hdr['1_YC'].split(' ')

                if len(xstr) > 1:
                    xpix    = int(float(xstr[0]))
                else:
                    if verbose: print 'Model xpix has no err; ',
                    xpix    = int(float(xstr[0][1:-1]))

                if len(ystr) > 1:
                    ypix    = int(float(ystr[0]))
                else:
                    if verbose: print 'Model ypix has no err; ',
                    ypix    = int(float(ystr[0][1:-1]))
            else:
                fit_region     = model_hdr['FITSECT']
                cutrange_low_x = int(float(fit_region.split(':')[0].split('[')[-1]))
                cutrange_low_y = int(float(fit_region.split(',')[-1].split(':')[0]))
                xsize          = model_hdr['NAXIS1']
                ysize          = model_hdr['NAXIS2']

                xpix           = cutrange_low_x + int(xsize/2.)
                ypix           = cutrange_low_y + int(ysize/2.)

            if 'cdfs' in pointingname:
                skycoord    = wcs.utils.pixel_to_skycoord(xpix,ypix,imgwcs, origin=1)
            elif 'cosmos' in pointingname:
                skycoord    = wcs.utils.pixel_to_skycoord(xpix,ypix,imgwcs, origin=0)

            ra_model    = skycoord.ra.value
            dec_model   = skycoord.dec.value

            delta_coord = np.sqrt( (np.cos(np.deg2rad(dec_model))*(ras[ii]-ra_model))**2.0 + (decs[ii]-dec_model)**2.0 )

            name_model.append(modelfile[0])
            N_model_comp.append(len(comps))
            ras_model.append(ra_model)
            decs_model.append(dec_model)
            delta_coords.append(delta_coord*3600.)
            x_image_model.append(xpix)
            y_image_model.append(ypix)
    if verbose: print '\n   done...'

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    if verbose: print ' - Defining fits table and filling it with data'
    c1  = pyfits.Column(name='id', format='J', unit='', array=objids)
    c2  = pyfits.Column(name='pointing', format='A30', unit='', array=pointing)
    c3  = pyfits.Column(name='ra', format='D', unit='DEF', array=ras)
    c4  = pyfits.Column(name='dec', format='D', unit='DEG', array=decs)
    c5  = pyfits.Column(name='redshift', format='D', unit='', array=redshifts)
    c6  = pyfits.Column(name='x_image_F814W', format='D', unit='PIXEL', array=x_image)
    c7  = pyfits.Column(name='y_image_F814W', format='D', unit='PIXEL', array=y_image)

    c8  = pyfits.Column(name='modelname', format='A110', unit='', array=name_model)
    c9  = pyfits.Column(name='Nmodelcomponents', format='D', unit='DEF', array=N_model_comp)
    c10 = pyfits.Column(name='ra_model', format='D', unit='DEF', array=ras_model)
    c11 = pyfits.Column(name='dec_model', format='D', unit='DEG', array=decs_model)
    c12 = pyfits.Column(name='deltacoord', format='D', unit='DEG', array=delta_coords)
    c13 = pyfits.Column(name='x_image_model', format='D', unit='PIXEL', array=x_image_model)
    c14 = pyfits.Column(name='y_image_model', format='D', unit='PIXEL', array=y_image_model)

    coldefs = pyfits.ColDefs([c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14])
    th      = pyfits.new_table(coldefs) # creating default header

    # writing hdrkeys:'---KEY--',                             '----------------MAX LENGTH COMMENT-------------'
    #th.header.append(('MAG     ' , spec2D[0].header['MAG']   ,'MAG_AUTO from interlaced catalog'),end=True)

    head    = th.header
    tbHDU   = pyfits.new_table(coldefs, header=head)
    tbHDU.writeto(fitsname, clobber=clobber)
    if verbose: print '   Fits table stored in \n   '+fitsname

    if genDS9region:
        if verbose: print ' - Generating DS9 region file'
        regionname = fitsname.replace('.fits','.reg')
        kbs.create_DS9region(regionname,ras,decs,color='magenta',circlesize=0.5,textlist=objids.astype(str),clobber=clobber)

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
def gen_LAEsourceCats(outputdir,sourcecatalog,modelcoord=False,verbose=True):
    """
    Generating MUSE-Wide poitning source catalogs for TDOSE extraction of LAEs

    --- INPUT ---

    --- EXAMPLE OF USE ---
    import uvEmissionlineSearch as uves
    uves.gen_LAEsourceCats('/Users/kschmidt/work/MUSE/uvEmissionlineSearch/tdose_sourcecats/','/Users/kschmidt/work/MUSE/uvEmissionlineSearch/LAEinfo.fits',modelcoord=True)

    """
    sourcetab = pyfits.open(sourcecatalog)[1].data
    pointings = np.unique(np.sort(sourcetab['pointing']))

    for pp, pointing in enumerate(pointings):
        objents     = np.where(sourcetab['pointing'] == pointing)[0]
        pointingcat = outputdir+'tdose_sourcecat_LAEs_'+pointing+'.txt'
        fout = open(pointingcat,'w')
        fout.write('# TDOSE Source catalog generated with uvEmissionlineSearch.gen_LAEsourceCats() \n')
        fout.write('# \n')
        fout.write('# parent_id id ra dec x_image y_image fluxscale \n')

        # if '02' in pointing:        pdb.set_trace()
        ids2skip = []
        ids2skip.append(121033078)  # Object with CIV being main line (conf=1) with potential Lya; no model available
        ids2skip.append(211049280)  # Potential CIII emitter (conf=1) at 2.76, i.e., no Lya in MUSE

        for objent in objents:
            objstr = ' -99  '

            if sourcetab['ID'][objent] in ids2skip:
                continue
            else:
                objstr = objstr + str(sourcetab['ID'][objent]) + ' '
                if modelcoord == True:
                    objstr = objstr + str(sourcetab['ra_model'][objent]) + ' '
                    objstr = objstr + str(sourcetab['dec_model'][objent]) + ' '
                    objstr = objstr + str(sourcetab['x_image_model'][objent]) + ' '
                    objstr = objstr + str(sourcetab['y_image_model'][objent]) + ' '
                else:
                    objstr = objstr + str(sourcetab['RA'][objent]) + ' '
                    objstr = objstr + str(sourcetab['DEC'][objent]) + ' '
                    objstr = objstr + str(sourcetab['x_image_F814W'][objent]) + ' '
                    objstr = objstr + str(sourcetab['y_image_F814W'][objent]) + ' '
                objstr = objstr + ' 1.0000 ' + ' \n'

                fout.write(objstr)
        fout.close()

        pointingcat_fits = f2a.ascii2fits(pointingcat,asciinames=True,skip_header=2,fitsformat='D',verbose=verbose)

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
def gen_GALFITmodelcubes(GALFITmodels,outputdir,PSFmodels=None,PSFmodelext=2,sourcecat_compinfo=None,
                         refnamebase='model_acs_814w_candels-PPPP_cut_v1.0_idIIII_cutout2p0x2p0arcsec.fits',
                         pointsourcefile=None,pointsourcescale=1.0,ignore_radius=0.3,clobber=False,verbose=True):
    """

    Function loading galfit models from modelinputdir (assumed to be names as imgblock_ID.fits), renaming them,
    converting them to cubes and generating the corresponding source catalogs needed by TDOSE. It also generates
    a template component info file which can be edited (after copying to a new file) and be provided back to the
    script for a second run updating the the cubes and source catalogs accordingly.

    --- INPUT ---


    --- EXMAMPLE OF USE ---
    import glob
    import uvEmissionlineSearch as uves

    GALFITmodels    = glob.glob('/Users/kschmidt/work/MUSE/uvEmissionlineSearch/imgblocks_josieGALFITmodels/imgblock_*.fits')
    outputdir       = '/Volumes/DATABCKUP2/TDOSEextractions/MW_LAEs_JKgalfitmodels/'
    PSFmodels       = ['/Users/kschmidt/work/MUSE/uvEmissionlineSearch/F814Wpsfmodel_imgblock_6475.fits']*len(GALFITmodels)
    pointsourcefile = None #'/Users/kschmidt/work/MUSE/uvEmissionlineSearch/pointsourceobjects.txt'
    uves.gen_GALFITmodelcubes(GALFITmodels,outputdir,PSFmodels=PSFmodels,sourcecat_compinfo=None,pointsourcefile=pointsourcefile)


    """
    Nmodels = len(GALFITmodels)
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    if verbose: print ' - Renaming files of '+str(Nmodels)+' models profived to GALFITmodels keyword'
    models_renamed = []
    model_ids      = []
    for modelname in GALFITmodels:
        objid    = modelname.split('block_')[-1].split('.fit')[0]
        pointing = mu.gen_pointingname(objid)
        newname  = outputdir+'/'+refnamebase.replace('IIII',str(objid)).replace('PPPP',pointing)
        cpcmd    = ' cp '+modelname+' '+newname
        if os.path.isfile(newname) & (clobber == False):
            if verbose: print ' clobber = False and '+newname+' already exists, so moving on to next file.'
        else:
            cpout = commands.getoutput(cpcmd)
        models_renamed.append(newname)
        model_ids.append(objid)

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    if pointsourcefile is not None:
        if verbose: print ' - Assembling list of models for objects to use point source extractions for '
        pointsources      = np.genfromtxt(pointsourcefile,dtype=None,comments='#')
        try:
            pointsourcescales = [pointsourcescale]*len(pointsources)
            ignore_radii      = [ignore_radius]*len(pointsources)
        except:
            pointsourcescales = pointsourcescale
            ignore_radii      = ignore_radius
    else:
        pointsources      = None
        pointsourcescales = 'dummy'
        ignore_radii      = 'dummy'

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    if PSFmodels is None:
        PSFlist = None
    else:
        if verbose: print ' - Loading PSF models '
        if type(PSFmodels) is list:
            PSFlist = []
            if type(PSFmodelext) is not list:
                PSFmodelext = [PSFmodelext] * len(PSFmodels)
            for mm, PSFmodel in enumerate(PSFmodels):
                PSFlist.append(pyfits.open(PSFmodel)[PSFmodelext[mm]].data)
        else:
            PSFlist = [pyfits.open(PSFmodels)[PSFmodelext].data]*len(GALFITmodels)

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    gen_compinfofile = True
    if sourcecat_compinfo is None:
        compinfofile = None
    else:
        if os.path.isfile(sourcecat_compinfo):
            if verbose: print ' - Will use existing point source component file provided:\n   '+sourcecat_compinfo
            compinfofile     = sourcecat_compinfo
            gen_compinfofile = False
            if verbose: print '   (no new file/template will be generated)'
        else:
            compinfofile = None

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    if verbose: print ' - Building cubes from renamed GALFIT models'
    tu.galfit_convertmodel2cube(models_renamed,includewcs=True,savecubesumimg=False,convkernels=PSFlist,
                                sourcecat_compinfo=compinfofile,normalizecomponents=False,pointsources=pointsources,
                                ignore_radius=ignore_radii,pointsourcescales=pointsourcescales,includesky=False,
                                clobber=clobber,verbose=verbose)

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    if gen_compinfofile:
        if verbose: print ' - Generating component info file template for source catalog updates'
        if sourcecat_compinfo is None:
            compinfofile = './component_info_template_RENAME_.txt'
            if os.path.isfile(compinfofile) & (clobber == False):
                if verbose: print '   ... but '+compinfofile+' exists and clobber=False, so skipping.'
        else:
            if os.path.isfile(compinfofile) & (clobber == False):
                if verbose: print '   ... but '+compinfofile+' exists and clobber=False, so skipping.'
            else:
                compinfofile = sourcecat_compinfo

        fout = open(compinfofile,'w')
        fout.write("""# TDOSE source catalog components keys for J. Kerutt's 2x2 arcsec GALFIT models of the MUSE-Wide LAEs from
# the first 60 MUSE-Wide pointings.
#
# --- TEMPLATE --- generated with uvEmissionlineSearch.gen_GALFITmodelcubes() on %s
#
# modefilename  id  componentinfo
""" % tu.get_now_string())

        for mm, GFmodel in enumerate(GALFITmodels):
            modelheader = pyfits.open(models_renamed[mm])[2].header
            compstring  = ' '
            for key in modelheader.keys():
                if 'COMP_' in key:
                    compNo = key.split('OMP_')[-1]
                    if modelheader[key] == 'sky':
                        compstring = compstring + compNo + ':3  '
                    else:
                        compstring = compstring + compNo + ':??  '

            outstring = models_renamed[mm]+'  '+model_ids[mm]+'  '+compstring.ljust(50)+\
                        '     # >>>KBS Notes>>>:    >>>JK notes>>>: '
            jknotes   = open('/Users/kschmidt/work/MUSE/uvEmissionlineSearch/imgblocks_josieGALFITmodels_all_ids.txt','r')
            for line in jknotes.readlines():
                if str(model_ids[mm]) in line:
                    outstring = outstring+'  '+line.replace('\n','').replace('	','   ')+'  '
            jknotes.close()
            fout.write(outstring+' \n')
        fout.close()
        if verbose: print ' - Wrote component info to: '+compinfofile
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
def gen_TDOSEsetupfiles(infofile,namebase='MUSEWide_tdose_setup_LAEs',clobber=False,
                        outputdir='/Users/kschmidt/work/MUSE/uvEmissionlineSearch/tdose_setupfiles/',verbose=True):
    """
    Generate TDOSE setupfiles for the LAE extractions

    --- INPUT ---

    --- EXAMPLE OF USE ---
    import uvEmissionlineSearch as uves
    infofile = '/Users/kschmidt/work/MUSE/uvEmissionlineSearch/tdose_setupfiles/MUSEWide_infofile_arche_PSFupdate_LAEs.txt'
    uves.gen_TDOSEsetupfiles(infofile)

    """
    tu.duplicate_setup_template(outputdir,infofile,namebase=namebase,clobber=clobber,loopcols='all',infofmt="S250",infohdr=2)

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
def rename_models(outputdir,sourcecatalog,cutoutsize=[2.0,2.0],clobber=False,
                  modeldir='/Users/kschmidt/work/MUSE/uvEmissionlineSearch/imgblocks_josieGALFITmodels/',verbose=True):
    """
    Renmae GALFIT models to comply with TDOSE naming convention (i.e. so TDOSE can find the models when
    looking for them using model_*refimage+cutoutstring*)

    --- INPUT ---

    --- EXAMPLE OF USE ---
    import uvEmissionlineSearch as uves
    outputdir     = '/Users/kschmidt/work/MUSE/uvEmissionlineSearch/ref_image_galfit_models/'
    sourcecatalog = '/Users/kschmidt/work/MUSE/uvEmissionlineSearch/LAEinfo.fits'
    uves.rename_models(outputdir,sourcecatalog,cutoutsize=[2.0,2.0],clobber=False)
    """
    modelfiles = glob.glob(modeldir+'/imgblock*.fits')
    sourcetab  = pyfits.open(sourcecatalog)[1].data
    if verbose: print ' - Found '+str(len(modelfiles))+' in modeldir to rename '

    for oldname in modelfiles:
        id     = oldname.split('/')[-1].split('_')[-1].split('.fit')[0]
        objent = np.where(sourcetab['id'] == int(id))[0]

        if len(objent) != 1:
            print ' - No match in sourcecatalog to object '+id
        else:
            pointing = sourcetab['pointing'][objent][0]

            if cutoutsize is None:
                cutoutstr = ''
            else:
                cutoutstr = ('_id'+str("%.9d" % float(id))+'_cutout'+str(cutoutsize[0])+
                             'x'+str(cutoutsize[1])+'arcsec').replace('.','p')

            if 'cdfs' in pointing:
                newname = outputdir+'model_acs_814w_'+pointing+'_cut_v1.0'+cutoutstr+'.fits'
            elif 'cosmos' in pointing:
                newname = outputdir+'model_acs_814w_'+pointing+'_cut_v1.0'+cutoutstr+'.fits'

            if os.path.isfile(newname) & (clobber == False):
                print ' - Clobber = False and '+newname+' already exists so no new copy made. Moving on'
            else:
                if verbose: print ' - Copying '+oldname+' to '+newname
                shutil.copy(oldname,newname)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
def get_ModelReferencePixelCoordinates(modeldir,pixpos='center',printcoords=True,verbose=True):
    """
    Extract the reference coordinates of the GALFIT models from the fits headers

    PROBLEM! GALFIT apparantly doesn't propogate the coordinates of the cutouts. It quotes the reference
             pixel coordinate from the image the cutout was generated from. In the case of the MUSE cutouts
             this means that the coordiantes are the reference position for the fullf-FoV muse pointing
             cutouts and not the individual object cutouts GALFIT is modeling.

    --- INPUT ---

    --- EXAMPLE OF USE ---
    import uvEmissionlineSearch as uves
    modeldir     = '/Users/kschmidt/work/MUSE/uvEmissionlineSearch/ref_image_galfit_models/'
    coordarray   = uves.get_ModelReferencePixelCoordinates(modeldir,printcoords=True,verbose=True)

    """
    modelfiles = glob.glob(modeldir+'*.fits')
    Nfiles     = len(modelfiles)
    if verbose: print ' - Found '+str(Nfiles)+' models to extract coordinates from '

    if verbose: print ' - Looping over models and extracting coordinates from: '
    coordarray = np.zeros(Nfiles, dtype={'names':['modelfile','xpix','ypix','ra','dec'],
                                         'formats':['a250', 'f8', 'f8', 'f8', 'f8']})
    for mm, modelfile in enumerate(modelfiles[0:5]):
        model_refimghdr = pyfits.open(modelfile)[1].header
        imgwcs    = wcs.WCS(tu.strip_header(model_refimghdr.copy()))

        if pixpos == 'center':
            model_shape     = pyfits.open(modelfile)[1].data.shape
            xpix      = int(model_shape[1]/2.)
            ypix      = int(model_shape[0]/2.)
        else:
            xpix      = pixpos[1]
            ypix      = pixpos[0]

        print imgwcs
        skycoord  = wcs.utils.pixel_to_skycoord(xpix,ypix,imgwcs, origin=0)
        ra        = skycoord.ra.value
        dec       = skycoord.dec.value

        if printcoords & verbose:
            print '   '+modelfile.split('/')[-1]+':  (ra,dec) = ('+str(ra)+','+str(dec)+')'

        coordarray['modelfile'][mm] = modelfile
        coordarray['xpix'][mm]      = xpix
        coordarray['ypix'][mm]      = ypix
        coordarray['ra'][mm]        = ra
        coordarray['dec'][mm]       = dec

    return coordarray
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
def launch_MiG(verbose=True):
    """
    Launching the MUSE inspection GUI to look manually search the MUSE data

    --- INPUT ---

    --- EXAMPLE OF USE ---

    """
    print ' under construction'



# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =