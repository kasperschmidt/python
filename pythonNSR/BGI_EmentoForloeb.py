#=======================================================================================================================
#from importlib import reload
import easygui
import pandas as pd
import datetime
from time import sleep
import pdb
import os
import sys
import numpy as np
pd.options.mode.chained_assignment = None # surpress 'SettingWithCopyError' warnings
#=======================================================================================================================
#Switches til kontrol af kode
GUIinput   = True # Aktiver GUI som beder om at indlæse Excel fil?
#=======================================================================================================================
def tjek_for_PI(dia_udsk,maade_udsk,BHKID):
    """
    Tjek indhold af patientkotakt for at bestæmme om der er tale om en primærindlæggelse (PI)
    """
    # Kolon:
    #         Proc: KJFB 30, 31, 30a, 31a, 33, 34, 43, 44, 46, 47, 50, 51
    # Rektum:
    #         Proc: KJGB 00, 01, 04, 06, 10, 11, 30 - 37, 40
    # Fødsel:
    #         DZ34
    KIR_BHKIDs_from_SPpull = [100349917, 100349921, 100378470, 100378471, 101687574, 131778484, 131778487, 132715092, 132715093, 133033783, 131217532, 131217534, 132426711, 132426712, 133114295, 133114843, 133270743, 133315405, 133316800, 133316801, 133630255, 135754862, 135754864, 137469761, 137469762, 137569434, 111210151, 111210153, 111241121, 111241122, 111735994, 104207587, 104207589, 104236954, 104236955, 99755094, 99755097, 100355763, 100355764, 129480056, 129480058, 129508763, 129508765, 131073648, 131202631, 131287630, 148213474, 148213478, 148225146, 148225147, 150305596, 150305597, 162582077, 162582080, 162979531, 162979533, 131203074, 131261994, 131263473, 131263474, 131278003, 131278151, 131347790, 131347791, 131698257, 132413026, 132426224, 137454026, 137454028, 138659646, 138659647, 114824969, 114911580, 114937373, 114937374, 115126616, 115227108, 96212424, 96212428, 97162072, 97162074, 97808481, 91132778, 91132784, 92417993, 92417994, 93143554, 93143555, 93145299, 93357046, 93438209, 93463592, 93463751, 93463752, 133657933, 133657936, 133669726, 133669727, 134679194, 134829865, 97291773, 97291776, 97846760, 97846761, 119706852, 119706855, 119720039, 119720041, 120189020, 120199275, 120318688, 120724539, 120988908, 121015632, 121016686, 121016687, 121051743, 121073389, 121225199, 121225200, 121268515, 121442211, 121618282, 121672331, 121677219, 121677226, 121716029, 121716042, 121716048, 121758818, 121807842, 121976404, 122200914, 122434825, 122459304, 122515883, 122585199, 122585288, 122687115, 122719538, 122890243, 123035029, 123134601, 123227957, 123228007, 123275945, 123276573, 123283260, 123495321, 123564753, 132380166, 132380168, 132386242, 132386243, 133925220, 134134259, 134140849, 134141080, 134141081, 116394763, 116394765, 117046520, 117046521, 117575799, 117696924, 117764642, 154800658, 154843716, 155080673, 155399189, 155399190, 155446113, 155560112, 155560113, 101681092, 101681094, 102809035, 102809037, 103254436, 103262971, 155877999, 155878001, 156240629, 156240632, 114307867, 114307869, 114342497, 114342498, 91429446, 91431966, 92066569, 92066570, 92328755, 90403720, 90403723, 90424406, 90424408, 167378773, 167378775, 168549960, 168549961, 114763049, 114763053, 115935111, 115935113, 116204690, 118696176, 118779410, 118788274, 118788275, 118789236, 118995593, 119011999, 119012000, 119054322, 119136531, 119140991, 119147002, 119147003, 119198656, 119321820, 119387297, 119391685, 119412755, 119463432, 119533291, 119638238, 119687215, 119780076, 119833716, 119962321, 119962322, 120058190, 120214112, 120273270, 120389503, 120739935, 120757712, 120774829, 120785675, 125631993, 125631997, 126751533, 126751534, 127102761, 127208525, 135781884, 135781887, 137894233, 137894235, 134576843, 134576846, 134965227, 134965228, 135155774, 94276976, 94281847, 94281926, 94281927, 135768448, 135768450, 137917080, 137917081, 104998937, 104998939, 105033146, 105033147, 168867408, 168867410, 169926542, 169926543, 170778171, 170804781, 170818487, 170838502, 170866756, 170875024, 108707083, 108707086, 110138817, 110138818, 166644294, 166644297, 168445158, 168445159, 138449873, 138449875, 138471515, 138471516, 131082194, 131082196, 131090799, 131090800, 132148686, 130136218, 130136220, 131713373, 131713374, 131895355, 98763211, 98763213, 99457844, 99457845, 98187629, 98187634, 98198696, 98198697, 99634179, 99893515, 100074013, 100280118, 118350783, 118350786, 119707262, 119707263, 120293356, 149988527, 149988530, 150000239, 150000240, 140467664, 140467670, 140469601, 140469604, 152394853, 152394855, 152796426, 152796427, 154715219, 154715222, 154735871, 154735872, 95825946, 95825950, 95845955, 95845956, 141016305, 141016308, 141948452, 141948453, 102190462, 102190464, 102199987, 102199989, 151359108, 151359110, 152681725, 152681726, 95047293, 95047297, 97396638, 97396639, 97749379, 97755661, 97769480, 97769795, 97769796, 97770686, 97826812, 98188193, 98231142, 98231418, 98231419, 142059868, 142059871, 142073880, 142073881, 145628573, 145867405, 145867406, 145913555, 146132809, 146136386, 146140327, 146140328, 146157003, 146182420, 146182421, 110989350, 110989354, 111011501, 111011502, 114716646, 115128235, 115252743, 115252749, 115252751, 115372293, 115372446, 115372447, 115376007, 115418840, 115420216, 115420217, 115468383, 134953735, 134953737, 134959542, 134959543, 131340009, 131340012, 131486191, 131486192, 165109702, 165109705, 165118690, 165118691, 128570167, 128618106, 128864627, 128951079, 128951080, 166617512, 166617514, 167444410, 167444413, 167689029, 167694863, 111976964, 111976966, 111996837, 111996838, 89853357, 89853359, 90838877, 90838878, 149134717, 149134720, 151630871, 151630872, 103813542, 103813545, 103825248, 103825249, 105053094, 105290702, 105571482, 162991521, 162991523, 163094783, 163094784, 163316628, 163317136, 163319205, 163501859, 163568641, 164094160, 164094163, 164097589, 164097590, 132253455, 132253457, 132461321, 132461322, 132721984, 117285457, 117285461, 117297012, 117297014, 118425741, 95581686, 95581688, 95589577, 95589578, 100224869, 100224872, 101489147, 101489148, 102218770, 102218771, 117121453, 117121457, 117763419, 117763421, 118115711, 144119106, 144119108, 144128663, 144128664, 145332808, 161255840, 161255842, 161937467, 161937468, 107874818, 107874821, 108705726, 108705727, 109119563, 109309455, 109309457, 138881413, 138881415, 140268500, 140268501, 140639608, 105396164, 105396167, 105744895, 105744897, 106077727, 106197388, 106197389, 106233255, 106240191, 106396548, 106507985, 106587720, 106593197, 161017986, 161017989, 161029474, 161029476, 159939398, 159939403, 160685587, 160685588, 88566542, 88566545, 88576781, 88576782, 167174253, 167174255, 168893865, 168893866, 169444592, 169581622, 169723933, 169753249, 169753275, 169753276, 169759272, 169759728, 169817525, 169817526, 169964273, 169964349, 169964350, 170324587, 170324870, 146627085, 146627087, 146638434, 146638435, 147422618, 159738444, 159738447, 159749347, 159749348, 137767088, 137767091, 137767343, 137767345, 139574531, 139611328, 112952085, 112955247, 112979777, 112979778, 148613782, 148613784, 153829741, 153829742, 134883030, 134883032, 135039143, 135039144, 143290809, 143290811, 143800758, 143800759, 167639120, 167639122, 168575737, 168575739, 168747839, 100681593, 100681596, 100701188, 100701190, 101914934, 102439392, 102496019, 102496904, 102542123, 102543129, 102543130, 102909682, 147566147, 147566149, 147581897, 147581898, 149978362, 150641691, 151178172, 152076688, 152076693, 152769569, 152769570, 105553963, 105553967, 106303727, 106303728, 152079419, 152084471, 153809650, 153809651, 155084291, 155307206, 155522591, 155523672, 103157301, 103157305, 103174609, 103174611, 104871911, 104875490, 104882874, 104883127, 104883128, 104895562, 105256458, 121841142, 121841147, 122586241, 122594037, 123038075, 123038076, 123203790, 123559379, 129592085, 129592088, 129602941, 129602945, 143674132, 143674134, 144758137, 144758139, 145118890, 145226220, 132626524, 132626526, 132635982, 132635984, 133941249, 134129460, 134381039, 111103538, 111103541, 111119585, 111119586, 111797883, 111964520, 165546987, 165546990, 165557103, 165557104, 166469984, 166549036, 106294915, 106294918, 107036738, 107036740, 127300210, 127300212, 127319817, 127319818, 94108058, 94108061, 94186598, 94186599, 124301520, 124301523, 125002493, 125002494, 125381575, 125429524, 156358350, 156358354, 157527314, 157527315, 145787378, 145787380, 146359131, 146359134, 146855753, 147037877, 147048527, 147049362, 147049363, 147128180, 147128305, 147128306, 147129187, 147197572, 147544432, 163635622, 163635624, 163808352, 163808353, 92940257, 92940259, 93524061, 93524062, 112379622, 112379625, 112493180, 112493181, 112957511, 112992671, 112992672, 155699298, 155699300, 155727106, 155727107, 156296365, 94623453, 94623455, 94634911, 94634912, 154935348, 154935350, 155079973, 155079974, 100450705, 100450709, 101528078, 101528080, 89989443, 89989445, 90004633, 90004634, 91300086, 105155716, 105155720, 105561342, 105561343, 106020315, 106076770, 104922667, 104922670, 105228090, 105228091, 91332377, 91332379, 91350546, 91350548, 97918537, 97918539, 97922321, 97922322, 159952031, 159952033, 160831383, 160831384, 161143439, 115730326, 115730328, 115736636, 115736637, 116716550, 116914523, 92860911, 92860914, 92869630, 92869631, 93656978, 138107073, 138107076, 138114962, 138114963, 138180198, 139466656, 139512265, 140310868, 140316200, 140316201, 140319878, 140334435, 140349403, 140444014, 140444015, 140632302, 140632303, 106063710, 106086674, 106511224, 106511788, 106511789, 106557652, 106603620, 138319513, 138319515, 138325107, 138325108, 144641969, 144641971, 145941399, 145941401, 146401597, 165413745, 165413747, 167075734, 167075736, 167607915, 167613399, 151082626, 151082629, 151097024, 151097025, 152403541, 164034139, 164034141, 164744804, 164744806, 164995345, 165198720, 165525728, 165554273, 165570725, 165577318, 165577319, 165592302, 165630294, 165646659, 103795159, 103795161, 103921026, 103921027, 104273821, 104406401, 104419492, 104419493, 124739540, 124739543, 125827600, 125827601, 126053188, 161608447, 161608449, 162088182, 162088183, 144022876, 144026801, 144026803, 145637420, 145637421, 145894697, 146422128, 146482366, 165993509, 165993511, 167770055, 167770056, 165131852, 165132079, 165198372, 165198373, 156766676, 156766678, 157859734, 157859735, 112042968, 112042971, 112526738, 112526739, 112961319, 139539286, 139539292, 141034365, 141034366, 141230353, 121065567, 121065569, 121076412, 121076413, 92663647, 92708325, 92708420, 92708421, 92755772, 92758752, 92929450, 92929451, 145674877, 145674882, 146780975, 146780976, 146919132, 147101880, 147127401, 108463314, 108463317, 108817413, 108817414, 94325636, 94325638, 94850930, 94850931, 144103748, 144103750, 144122291, 144122292, 145922279, 142273003, 142273005, 142293380, 142293381, 142857882, 142998805, 124624932, 124624935, 125555028, 125555030, 137330386, 137338765, 138329158, 138329159, 138700571, 138986878, 139159534, 101625652, 101626568, 102331035, 102331036, 96979941, 96979945, 97580180, 97580181, 97772682, 97829585, 97870176, 97908360, 97948789, 97963162, 97963163, 98004519, 98209516, 98214414, 98214415, 98652118, 98652411, 98777087, 98833708, 98833709, 98851339, 98880002, 99056546, 99056547, 93080521, 93080524, 94110281, 94110282, 94633189, 95259253, 111557415, 111557420, 111573513, 111573514, 115299221, 115299261, 115622591, 115939351, 90508228, 90508231, 90817074, 90817075, 91299582, 165981368, 165981370, 165990027, 165990029, 162755669, 162755671, 162765244, 162765245, 110152222, 110155163, 110892563, 110892564, 108909740, 109091340, 109314479, 109314480, 132586435, 132586438, 133171512, 133171513, 133659204, 139992213, 139992215, 139998223, 139998225, 151496939, 151496941, 151506944, 151506945, 152261617, 152466645, 140367718, 140367720, 141120950, 141120951, 141443971, 92506445, 92506449, 92539271, 92539272, 132824584, 132824586, 132828906, 132828907, 134802435, 120856994, 120856996, 120864494, 120864495, 121880199, 121882410, 121882516, 121882517, 121977233, 122153078, 122197279, 122197465, 122197466, 122205058, 122438216, 122679646, 134489491, 134489494, 135310562, 135310563, 119024239, 119101807, 119198475, 119199574, 119199575, 104832602, 104832605, 105345025, 105345026, 144142224, 144142227, 144265865, 144265866, 90082299, 90082302, 90097023, 90097025, 90953845, 91015373, 91145732, 100090624, 100090626, 100115627, 100115628, 101222987, 101223157, 101354890, 101357222, 101357230, 101357231, 101723037, 102021962, 102022288, 102022289, 102023792, 102275506, 102277997, 102277998, 102446361, 102626100, 102626101, 118798694, 118798698, 118815696, 118815697, 119803286, 104180712, 104229535, 104233825, 104233826, 104522854, 104921484, 149268195, 149268197, 149285392, 149285393, 150406401, 150445104, 150488240, 150492436, 150492437, 150557053, 150858775, 151089733, 151302332, 151304596, 151366177, 151366221, 151612145, 151825744, 151825745, 105916816, 105916818, 105929754, 105929756, 107354971, 107745505, 107846962, 108001279, 108001560, 108001561, 108008625, 108065974, 135296598, 135296601, 136788917, 136788918, 137099380, 137106255, 163145808, 163145810, 163496376, 163496377, 163777672, 163984917, 164149653, 164150492, 164150493, 164150938, 108326863, 108326865, 109304383, 109304384, 165421498, 165421501, 165679301, 165679302, 166060122, 166067014, 166067015, 96826617, 96826620, 97382820, 97382821, 95303947, 95309490, 95309494, 95419113, 95419114, 95767387, 94629424, 94629428, 95678274, 95678275, 115356712, 115356715, 115368319, 115368320, 117077049, 117123079, 138001209, 138001214, 138587252, 138587253, 146584646, 146584649, 146590206, 146590208, 94201121, 94201124, 94207343, 94207345, 167305415, 167305417, 167322348, 167322351, 168183135, 151602168, 151602171, 152507427, 152507428, 139013326, 139013329, 140248213, 140248214, 154019557, 154019560, 154019999, 154020003, 154025798, 154102577, 154390119, 110624446, 110624448, 110638466, 110638469, 114954345, 114979634, 102796583, 102816326, 104221938, 104221939, 104887709, 104896727, 104921734, 104923499, 104980534, 104983406, 104993811, 105053326, 105054738, 134402998, 134403002, 134406295, 134406296, 135676581, 157364400, 157364405, 157368514, 157368515, 159336197, 150850303, 150850305, 151368402, 151368403, 151834919, 106501571, 106501573, 107878987, 107878988, 167889034, 167889037, 167900396, 167900397, 169537913, 102166259, 102166262, 102946121, 102946123, 103267640, 103505156, 103552072, 103557804, 103557805, 103567992, 103675474, 103729813, 103876406, 103876595, 104001406, 140937893, 140937896, 140950264, 140950265, 142094584, 123357470, 123357472, 124890732, 124890733, 93386801, 93386803, 94247890, 94247891, 136697083, 136697085, 137786465, 137786466, 162788032, 162788034, 162862688, 162862689, 118417237, 118417240, 118695952, 118695954, 113095422, 113095424, 115017139, 115017140, 115389857, 138207210, 138212072, 138212075, 138217134, 138217135, 140084679, 157837927, 157837932, 157847550, 157847551, 105019016, 105019019, 105040998, 105040999, 105071587, 105631571, 105637896, 105957087, 105972873, 106073399, 106094149, 106116368, 106120966, 106120967, 106188397, 106288031, 106399815, 100802839, 100802845, 101747625, 101747626, 166770439, 166770445, 166782737, 166782738, 165451483, 165451486, 165458546, 165458547, 165752937, 165752940, 165794218, 165794220, 140233118, 140233120, 140244304, 140244305, 111844361, 111844364, 114175403, 114175404, 114933174, 115393052, 115393053, 115453658, 115454721, 127111648, 127111650, 127118531, 127118532, 128307650, 128500100, 161031995, 161031998, 161045704, 161045705, 139002111, 139002114, 139015236, 139015238, 141790136, 142277726, 142421183, 110133814, 110161956, 110161957, 110182674, 110463689, 169889467, 169889469, 170617393, 170617394, 167074300, 167074303, 167914292, 167914293, 159000139, 159000141, 159774415, 159774416, 160261698, 160262785, 160268014, 160268015, 160285073, 160418580, 121524794, 121524797, 121526196, 121526197, 107721174, 107721177, 108475151, 108475152, 109015385, 109242413, 109473224, 130095455, 130095458, 130129205, 130129206, 98768373, 98768378, 100133505, 100133508, 96653181, 96653183, 96921761, 96921762, 97104533, 158019324, 158019326, 159297910, 159297912, 140589211, 140589215, 141674166, 141674167, 142360792, 142381524, 142385303, 142385304, 142421771, 142422227, 142484342, 142497636, 142506606, 142652971, 142920400, 167196294, 167196296, 169584530, 169584531, 169856269, 169890351, 169990058, 170234790, 170292763, 170568602, 117732875, 117732877, 117748171, 117748172, 118161979, 118162003, 118162004, 118228314, 118343917, 118587329, 122359359, 122359361, 123782673, 123782674, 135757457, 135757459, 135760958, 135760959, 137825179, 137909758, 161386840, 161386843, 161710968, 161710969, 163487508, 163487511, 163493985, 163493986, 137355444, 137355449, 139001872, 139001873, 122885560, 122885562, 123377649, 123377650, 108330610, 108345285, 109677985, 109677986, 110038915, 110168066, 157243433, 157243438, 157640401, 157640402, 160085147, 160085149, 160649845, 160649846, 135780256, 135780259, 136819909, 136819911, 148867788, 148867791, 148875607, 148875608, 150220460, 150374951, 134872520, 134872522, 135791144, 135791145, 136127250, 131686753, 131686759, 131694264, 131694265, 116673166, 116673170, 117512164, 117512165, 118159184, 118201924, 118201925, 118202178, 118292926, 118307213, 118307214, 159726173, 159726178, 159736375, 159736376, 106070367, 106070371, 107174200, 107174202, 126745868, 126745871, 126898725, 126898726, 161807727, 161807729, 161816852, 161816853, 157380115, 157380117, 157382031, 157382032, 159823889, 119801969, 119801971, 122343518, 122343519, 122743785, 109408278, 109408282, 109831544, 109831546, 127222423, 127222427, 127227759, 127227760, 130075191, 91957491, 91957494, 92433338, 92433339, 121811465, 121826912, 123026153, 123026154, 123559133, 99309952, 99309954, 100259038, 100259039, 109191133, 109191136, 109212052, 109212055, 111197066, 94434475, 94434478, 95174418, 95174419, 117525580, 117525584, 118425252, 118425253, 134890557, 134890559, 135801795, 135801796, 136483085, 136484117, 136484118, 136497983, 136560565, 136737383, 136776916, 137026921, 137365952, 137551392, 137670027, 137670028, 137671055, 137701686, 137876117, 163574947, 163574950, 163581950, 163581951, 105815573, 105815575, 105828025, 105828026, 106546791, 115803361, 115803363, 115825422, 115825424, 134789269, 134789272, 134793080, 134793082, 136859326, 117288068, 117288072, 117643988, 117643989, 118068103, 153905182, 153905185, 153923652, 153923654, 102905546, 102905549, 102909488, 102909489, 166078389, 166078391, 166084721, 166084722, 119563208, 119563211, 119578498, 119578500, 120710895, 120782881, 120795831, 120805635, 120805636, 126618978, 126618980, 127010021, 127010022, 127425240, 127433837, 127499634, 127512357, 127513608, 127513609, 127521582, 127662897, 127662898, 127698278, 127702871, 127830438, 127842692, 127842693, 127845539, 127861008, 127861009, 127887846, 127919858, 127919983, 127919985, 127997842, 127999933, 128025144, 128025145, 128234526, 112344487, 112344488, 112380176, 112380182, 112722865, 112773974, 112823681, 112825859, 113087524, 162361741, 162361744, 164459849, 164459851, 153254495, 153254498, 153256554, 153256555, 153789035, 153806608, 148225266, 148225269, 149282351, 149282352, 132156245, 132156247, 132163093, 132163095, 136792276, 136792280, 137998951, 137998952, 138402951, 138402955, 138404526, 138405112, 138405113, 138405259, 138407521, 138443364, 138443366, 138604595, 138753637, 138951987, 138984127, 139042787, 139387592, 139435644, 139510234, 139633048, 139677283, 139677284, 139696383, 139895335, 139895336, 95388117, 95388123, 96122400, 96122401, 105728156, 105728158, 106715656, 106715658, 107243962, 107616854, 97512934, 97662006, 97760977, 97760996, 97760997, 97783270, 97908525, 97910196, 140453454, 140453458, 140462388, 140462389, 142640110, 124736742, 124736744, 125228377, 125228379, 136682277, 136682279, 136688665, 136688666, 105823030, 105823034, 106747237, 106747238, 164524254, 164524256, 164742924, 164742925, 97682705, 97682708, 97689617, 97689618, 98575098, 101487154, 101487156, 102647799, 102647800, 102924231, 103030443, 103101720, 103485065, 103766412, 103766601, 103766602, 103769522, 103773055, 103773056, 138200254, 138200256, 138204107, 138204109, 98166315, 98166318, 98194041, 98194042, 105569988, 105569991, 106605594, 106605595, 107149967, 107154191, 107154192, 107279824, 107453158, 107622195, 107641454, 107658515, 107905408, 107935284, 108130604, 108353018, 108479614, 167184409, 167184412, 167673099, 167673100, 101278422, 101278424, 102350751, 102350753, 102790963, 102790966, 103623146, 103623147, 104117584, 104186731, 104383204, 104383845, 100636396, 100760843, 100763179, 100763180, 102322770, 102322773, 103054065, 103054067, 103732569, 103747142, 103782315, 103941201, 103946506, 103949589, 103949590, 103950072, 103966483, 103966765, 103966766, 104111976, 104143972, 104258509, 104430456, 104554229, 104718716, 104866103, 104975723, 105072542, 105217965, 139958872, 139958874, 141476587, 141476589, 134928331, 134936919, 134947361, 134947362, 135121424, 135127035, 135141079, 135141080, 135272211, 104931141, 104931147, 105155530, 105155531, 105528732, 105531469, 105532695, 105542240, 105550314, 105550315, 105584095, 105595463, 105623462, 105623463, 105638798, 105691134, 105708518, 105708519, 105716164, 106042832, 106089333, 106093660, 106132618, 106133876, 106133877, 106141636, 106146593, 106170909, 106170910, 106180323, 106217624, 106344232, 106344233, 106719477, 106997147, 107064069, 107221043, 107222188, 107222189, 107222371, 107357371, 107687869, 107720402, 107790468, 162249375, 162249377, 162997329, 162997330, 128763159, 128763161, 128776423, 128776425, 131051298, 131093898, 131131794, 131622868, 131624610, 131624612, 138435022, 138435026, 140116525, 140116528, 140679479, 140681075, 140681076, 140861448, 140969338, 141029894, 141029895, 118374302, 118391878, 118392670, 118392671, 118458306, 118477504, 118494814, 118494815, 118498405, 118536819, 118536820, 118541736, 118580258, 161834957, 161834960, 165247345, 165247346, 165873872, 165963788, 165992110, 166025634, 166031838, 166031839, 166044109, 166149077, 166149414, 166149415, 166157098, 166159210, 166170273, 166171466, 166171467, 166273519, 166936509, 166936510, 167179660, 167295817, 144812932, 144815987, 144815988, 144816019, 144817310, 144817311, 144826587, 144837074, 145162531, 159493030, 159493032, 159515319, 159515320, 150243369, 150243373, 150253808, 150253809, 129607518, 129607520, 129615575, 129615576, 130389087, 130389089, 136663294, 136663296, 147029100, 147029102, 147040484, 147040485, 148514385, 162061578, 162062363, 162597156, 162597158, 163075171, 163076900, 130869958, 130871048, 130871050, 131282060, 131282061, 161131149, 161131152, 161144959, 161144960, 161862174, 88972282, 88972283, 91162349, 91162976, 91844280, 102200975, 102201642, 103497582, 103497583, 103782473, 115931743, 115931746, 115947000, 115947001, 116063099, 116063104, 116080018, 116080019, 117586375, 100122950, 100122953, 100796269, 100796270, 100813273, 138556116, 138556118, 139643973, 139643974, 139999629, 149276235, 149276237, 150125010, 150125011, 106383030, 106383032, 107068812, 107068813, 108066573, 101632404, 101632406, 101641793, 101641795, 103446013, 103446329, 103446330, 103675098, 103987482, 103989559, 103989596, 103989597, 103995901, 104238484, 104303881, 104383080, 104599475, 104686679, 104686680, 104761403, 105000191, 105081514, 105369682, 105498682, 105558308, 105569563, 105584822, 135284041, 135284044, 135878066, 135878067, 136749735, 156684876, 156684878, 157857484, 157857485, 167452164, 167703584, 168089730, 168089731, 168192825, 168242082, 168242085, 147541475, 147541477, 147555521, 147555522, 146776488, 146776490, 146783908, 146783909, 158326293, 158326297, 158341030, 158341031, 136054270, 136054272, 136059299, 136059300, 137629156, 137848978, 138079481, 138148687, 151511685, 151511687, 153009586, 153009587, 153389714, 153448545, 153454077, 153454078, 114532795, 114532798, 115035275, 115035276, 115390679, 102556109, 102556112, 102585821, 102585822, 93421321, 93431676, 93431679, 93440029, 93440030, 94113058, 94683894, 95010196, 95010197, 94509711, 94509715, 94515590, 94515592, 95966005, 95969449, 96760824, 97909490, 97909492, 98666657, 98666658, 98881035, 98971970, 132805317, 132805320, 132809643, 132809644, 124856847, 124856849, 125629890, 125629891, 126128398, 126160772, 126257615, 91312535, 91312540, 91683129, 91683130, 92616949, 92629424, 107867448, 107867452, 107881107, 107881108, 125336839, 125336843, 125344653, 125344654, 106476813, 106476818, 107428074, 107428077, 108093464, 134254739, 134254743, 134894697, 134894698, 135272412, 154483311, 154483316, 155094657, 155094659, 155452859, 155453189, 155453190, 158996455, 158996459, 159846035, 159846039, 160245059, 160247979, 160247980, 100103907, 100105175, 102448513, 102448515, 123590732, 123590734, 123605348, 123605349, 93625380, 93625383, 94529272, 94529273, 102333973, 102336054, 102336057, 103018234, 103018235, 103452475, 103664954, 103953806, 103973918, 103974010, 103974011, 104006061, 104008623, 125117363, 125138933, 125138934, 126814217, 127665014, 128230491, 128230492, 128232334, 128352677, 128591170, 128591600, 128608786, 129132585, 129269616, 129347559, 129501474, 129501480, 129624177, 129797242, 130001070, 130001098, 130080490, 130317455, 157127034, 157127037, 157137251, 157137252, 140765370, 140765372, 140771889, 140771890, 102807377, 102807380, 103389028, 103389030, 127478483, 127478485, 127481219, 127481220, 129417681, 129419364, 129419365, 107035674, 107035679, 107048409, 107048411, 94310389, 94310393, 95145335, 95145336, 95550149, 91561963, 91561968, 91573564, 91573565, 92467794, 150367459, 150367463, 150380322, 150380323, 154665452, 154673068, 155086865, 155159333, 155186592, 155196471, 155196472, 155198343, 155678889, 155741605, 155741614, 110862964, 110862969, 110889461, 110889462, 111456316, 120583354, 120583357, 121250988, 121250989, 121517417, 121675397, 121744223, 97369071, 97369073, 97376309, 97376310, 98629836, 162482458, 162482460, 162487678, 162487679, 110976057, 110976061, 110997962, 110997963, 147314850, 147314852, 148370030, 148370032, 162374688, 162374690, 163253691, 163253692, 135662116, 135662118, 135682527, 135682528, 141253446, 141260199, 141261440, 141261441, 165510661, 165510663, 166215078, 166215079, 131479206, 131479522, 131488203, 131488204, 106592142, 106592146, 107291241, 107291242, 107350677, 107773445, 107779278, 107806070, 108069659, 127452983, 127452989, 127464656, 127464657, 160559879, 160559882, 160569129, 160569130, 148752099, 148752104, 148764654, 148764655, 129760811, 129760813, 129778389, 129778390, 141106363, 141106365, 141117256, 141117257, 142500171, 142970155, 116305071, 116305075, 117122831, 117122832, 117318414, 155708446, 155708449, 155712881, 155712882, 157607011, 97134843, 97134845, 97560137, 97560139, 97808381, 129460855, 129460857, 129465447, 129465448, 146227112, 146227114, 148646995, 148646996, 123592029, 123592032, 124734596, 124734597, 125308464, 116053351, 116053354, 116067215, 116067217, 118109845, 118109848, 118801366, 118801367, 115483417, 115483421, 115955731, 115955732, 142941077, 142941078, 143695537, 143697513, 144438089, 144438090, 144467032, 123582207, 123582209, 124597332, 124597334, 156364721, 156365718, 156375804, 156375805, 157917106, 158068555, 158478363, 156013226, 156013229, 156957840, 156957844, 157133144, 120696904, 120696907, 122084249, 122084250, 122227486, 133150175, 133150177, 133154323, 133154325, 147019512, 147019516, 147028673, 147028674, 148195039, 148353957, 148452660, 148452661, 148521017, 111219630, 111219632, 112386966, 112386969, 112912703, 144612449, 144612452, 145005994, 145005995, 92745742, 92745744, 93767880, 93767881, 121613656, 121675008, 121675180, 121675181, 140348762, 140348764, 140358950, 140358951, 138991206, 138991208, 140470614, 140470616, 141161003, 141256835, 141304311, 141455792, 141455793, 141466776, 141492852, 162575755, 162575757, 162580063, 162580065, 94420442, 94420446, 94726694, 94726695, 160959394, 160959680, 161125633, 161125636, 112845267, 112845272, 112986582, 112986584, 105230068, 105230071, 105243019, 105243020, 109346259, 150738903, 150738905, 151001852, 151001853, 99645453, 99645456, 100364120, 100364121, 101387562, 170229011, 170229013, 170250234, 170250235, 119251669, 119251672, 120158041, 120158042, 123218137, 123225225, 123272401, 123272402, 134558037, 134558039, 134564177, 134564178, 122456678, 122456680, 123592330, 123592332, 104749646, 104749652, 104939605, 104939606, 161723135, 161723138, 162515525, 162515526, 163000309, 163091688, 163097531, 163097532, 163347474, 144901556, 144901560, 147700872, 147700873, 148099869, 96186948, 96186951, 96341716, 96341718, 121509734, 121509737, 122186621, 122186622, 122757979, 122757982, 123127136, 123127137, 123592991, 123717174, 143167510, 143167513, 144115650, 144115651, 101113713, 101113717, 101294799, 101294800, 148870575, 148870578, 148887709, 148887710, 150115369, 156662446, 156662449, 157259996, 157259997, 157608008, 136662067, 136662069, 137474393, 137474394, 133989224, 133989226, 134770663, 134770664, 120657148, 120657151, 121721725, 121721726, 121722549, 122010208, 123005021, 123005024, 123019383, 123019384, 151086004, 151086008, 151116674, 151116675, 152022956, 96555024, 96555028, 97061460, 97061461, 168803269, 168803272, 169816828, 169816829, 102660243, 102660246, 102685265, 102685266, 110610452, 110610455, 110895431, 110895432, 105470420, 105528517, 105533145, 105533146, 105608990, 105658040, 105698085, 98454790, 98454796, 98467746, 98467747, 129884471, 129884473, 131345247, 131345248, 167317866, 167317868, 167317932, 167317933, 168119392, 91023319, 91023322, 91553760, 91553761, 168895668, 168895670, 168903904, 168903905, 141823031, 141823035, 141835354, 141835355, 143686917, 143830111, 144331752, 105618104, 105618106, 105644971, 105644972, 107041301, 107221051, 107417881, 107418552, 107418553, 107435110, 107481091, 107492276, 107497107, 107497108, 107560532, 107819080, 104240892, 104240895, 104244803, 104244804, 99743879, 99743881, 99764739, 99764740, 91996913, 91996916, 92000107, 92000108, 92248094, 92789887, 93165591, 99847169, 99847171, 101151122, 101151123, 150221737, 150221741, 150238952, 150238954, 150879440, 131807081, 131807084, 132929591, 132929592, 133035367, 133038637, 133071992, 133077155, 133077156, 113954560, 113954562, 113969985, 113969986, 166202550, 166202553, 166772874, 166772875, 141192110, 141204698, 141204790, 141204791, 141206993, 141221443, 141344957, 141373326, 141373327, 141759190, 141763726, 141763727, 141888701, 142196107, 142201535, 142201537, 142241296, 142349573, 142349574, 142382813, 142416879, 142565608, 142565609, 142863457, 142884842, 142884843, 143339908, 102777051, 102861979, 102865413, 102865414, 103483282, 127452815, 127452819, 128234346, 128234347, 104306003, 104306005, 105333378, 105333379, 105496919, 141570700, 141570703, 142444472, 142444473, 92204718, 92204721, 94018348, 94018349, 153935703, 153935705, 153941735, 153941737, 132386330, 132386332, 133051928, 133051929, 139537931, 139537934, 141390397, 141390399, 142070970, 142289063, 142421324, 108923411, 108923417, 109209180, 109209181, 151292440, 151292442, 151648056, 151648059, 151825199, 151856902, 151856903, 151911373, 151914626, 151914627, 151986835, 152001791, 152402532, 152453591, 152453592, 152466580, 152481202, 112247499, 112247502, 112278951, 112278953, 157747789, 157747791, 157843279, 157843280, 111729179, 111729181, 111849055, 111849056, 107733634, 107733637, 107760583, 107760584, 162308296, 162308298, 163082897, 163082898, 163724235, 109308528, 109308531, 109312817, 109312819, 111805548, 130857783, 130857785, 132057913, 132057914, 168661749, 169411329, 169892931, 169892933, 170062199, 170852088, 126978225, 126978227, 127542630, 127542631, 127930517, 165709726, 165709728, 166324564, 166324566, 135316322, 135317006, 137362840, 137362841, 137644264, 97988694, 97988696, 97990785, 97990786, 116528136, 116528138, 116687806, 116687807, 99644361, 99644364, 99654549, 99654550, 101220641, 137200914, 137200916, 137659650, 137659651, 132905479, 132905481, 133031729, 133031730, 92121172, 92121177, 93079680, 93079681, 93378680, 98961304, 98961308, 99657195, 99657197, 96309018, 96309022, 96325947, 96325948, 138855578, 138930361, 138935176, 138935177, 138951786, 138952511, 138211196, 138211198, 139531772, 139531774, 94309974, 94309976, 95048674, 95048675, 96502723, 96502725, 96517533, 96517534, 95028921, 95028924, 95029373, 96327971, 96327972, 96483264, 96512759, 162768136, 162768138, 162780355, 162780356, 99998201, 100073482, 100075620, 100075622, 132894126, 132894128, 132904043, 132904045, 119827608, 119827611, 120411995, 120411996, 164817109, 164817111, 165146563, 165146565, 169040327, 169040329, 169046072, 169046073, 169598891, 100333370, 100333372, 101338359, 101338360, 101453515, 101459554, 101459744, 101459745, 101462298, 101468122, 101468123, 101496764, 101544456, 101588349, 101588351, 101622981, 101637283, 143641544, 143641546, 148119002, 148119003, 148513302, 148742319, 128993283, 128993286, 130142408, 130142409, 129369484, 129369489, 129909542, 129909543, 101143289, 101143293, 101167922, 101167924, 102609925, 94331417, 94331420, 95297512, 95297513, 95771974, 90907908, 90907912, 90915747, 90915749, 92310243, 92315211, 92582745, 92582746, 121386295, 121386298, 121395371, 121395372, 122683541, 140744513, 140744517, 141278576, 141278577, 142259097, 159684281, 159735434, 159867860, 160108943, 160108944, 112071858, 112071860, 115502354, 115502355, 97043068, 97043072, 97306049, 97306050, 103375719, 103375721, 104058922, 104058923, 92355935, 92355938, 93086922, 93086923, 93426952, 93497291, 93604666, 168889807, 168889811, 169127757, 169127758, 149771669, 149776254, 149776259, 150135096, 150135098, 150571009, 150838406, 150849527, 150850650, 150850651, 150897309, 150925857, 150925858, 150927513, 150979059, 150979060, 151135633, 151261986, 151272039, 151272040, 151301188, 151404425, 151404426, 151443959, 151462968, 151462969, 151549304, 151649173, 151649174, 151692642, 151756374, 151951436, 152059899, 152059901, 130601255, 130601258, 131790469, 131790470, 105482402, 105482404, 105925475, 105925476, 98917754, 98917756, 99763924, 99763925, 119477780, 119477783, 120848851, 120848853, 107859163, 107859166, 107875554, 107875555, 115463928, 115463933, 116200555, 116200556, 117857554, 150381953, 150382379, 150382381, 150735015, 150735016, 154814557, 154814560, 154821225, 154821226, 127324124, 127326374, 128616538, 128616539, 102644906, 102644908, 102656882, 102656884, 101474440, 101697801, 101883376, 101980503, 101980504, 141477735, 141477737, 141494508, 141494510, 137742811, 137742816, 138686692, 138686694, 102671124, 102671127, 102682571, 102682572, 103944692, 104031535, 124873169, 124873172, 124895929, 124895930, 126115504, 126040040, 126040042, 126061795, 126061796, 146941860, 146941862, 146946658, 146946659, 147793551, 147796106, 147848476, 147907035, 157479450, 157479452, 157483049, 157483051, 159626687, 166059528, 166059530, 166479997, 166479998, 166902215, 123873503, 123873506, 124648320, 124648321, 124927692, 106092950, 106092952, 107324264, 107324265, 107700612, 108069069, 108306026, 108373862, 108373863, 108373865, 108570884, 108783967, 108973795, 108973796, 93203520, 93203525, 93421187, 93421190, 94003623, 94030948, 94047326, 94047328, 94133429, 108691881, 108691884, 108696133, 108696134, 110462241, 110462976, 110462977, 110468541, 115497750, 115497752, 115510912, 115510913, 139553642, 139553645, 139560115, 139560116, 93625769, 93632147, 94768948, 94768949, 141681980, 141682214, 141690258, 141690259, 137356689, 137356692, 138483446, 138483447, 164856088, 164856093, 165138173, 165138175, 122495099, 122495101, 124176814, 124176815, 133903450, 133903454, 134180996, 134180997, 118098710, 118098712, 118114197, 118114199, 99247885, 99247888, 99773441, 99773442, 94423009, 94878314, 94884333, 94884335, 94912559, 95007631, 95115206, 95137891, 95146719, 95180681, 95209546, 95643553, 95742434, 95753181, 95869336, 95916496, 95961031, 95961032, 101020291, 101020294, 101869804, 101869805, 97989791, 97989793, 98985845, 98985846, 99371282, 99374221, 99374223, 99805896, 100006348, 100006349, 100010576, 100506792, 100539048, 100565287, 100571415, 100588485, 100909936, 101022797, 101067976, 101137796, 101237707, 101385069, 101395882, 101422648, 101507653, 162850664, 162850666, 163627252, 163627253, 130964322, 130964326, 130992798, 130992800, 90910583, 90910585, 91349054, 91349055, 162877812, 162877816, 164997362, 164997363, 165340988, 100927642, 100927646, 100937215, 100937216, 102230586, 160156913, 160156915, 161517501, 161517502, 115833893, 115833895, 115849192, 115849194, 160189297, 160189300, 161417509, 161417510, 125812257, 125812261, 127337285, 127337286, 119149953, 119149956, 119161868, 119161869, 120836656, 120842978, 120842979, 120910568, 103919227, 103927433, 106192224, 106192225, 107148888, 134969786, 134969789, 136159073, 136159075, 99121016, 99247606, 99255835, 99255837, 99503436, 99805973, 133666252, 133666254, 134700591, 134700592, 158495820, 158495822, 159750108, 159750109, 90903011, 90903014, 91664042, 91664044, 159627392, 159627394, 160351153, 160351156, 141253226, 141253229, 141264937, 141264940, 143441275, 143491473, 143806585, 143829474, 143873867, 144042904, 144104142, 144215693, 144215895, 144215896, 144220947, 144220948, 144222251, 144263663, 144291755, 144306967, 144306968, 144312197, 144480339, 144717222, 155551645, 155551647, 155849767, 155849768, 131118138, 131118142, 131125788, 131125789, 137672167, 137672169, 137774005, 137774006, 133431334, 133431338, 133990320, 133990321, 150006998, 150007002, 150368553, 150368554, 155622973, 155622976, 155631859, 155631860, 164167369, 164281876, 164302459, 164303712, 164303713, 164308220, 120717128, 120717131, 120731214, 120731215, 154610892, 154610894, 155486171, 155486172, 155527472, 157150414, 157150416, 157161956, 157161957, 134633100, 134633103, 136445400, 136445401, 136720982, 136752182, 163466684, 163505264, 163506410, 163506411, 163679730, 163683236, 163683512, 163683513, 163752890, 143000256, 143171734, 143173396, 143173397, 167560644, 167560647, 167576709, 167576710, 137010296, 137010298, 138332445, 138332446, 144034324, 144034326, 145670733, 145670734, 105640156, 105640160, 105994202, 105994204, 132617597, 132619715, 133550489, 133550490, 133811557, 152518193, 152518195, 154980036, 154980038, 150726024, 150726027, 150726541, 151291905, 151291906, 151462082, 151462604, 151914141, 132360122, 132360124, 132633189, 132633190, 158754549, 158754553, 160188022, 160188025, 160466170, 160466171, 160477302, 161021188, 161116481, 161497810, 161891548, 161891549, 103099290, 103099291, 104306355, 104306358, 95809655, 95809660, 96582253, 96582254, 96697937, 96703527, 96722357, 96879419, 145005082, 145005085, 145024732, 145024733, 130589369, 130589371, 131908176, 131908177, 135300673, 135300675, 135311424, 135311425, 136560756, 130719055, 130719057, 131308422, 131308423, 126875661, 126875664, 126889705, 126889706, 125647455, 125647459, 125660917, 125660918, 126936507, 123329998, 123330000, 123614560, 123614562, 100692852, 100692857, 100706500, 100706501, 101383198, 101496431, 103565409, 103567801, 103932972, 104056262, 104089380, 104089381, 104323922, 105063085, 105063086, 105273914, 97314944, 97314946, 97925893, 97925894, 94302954, 94373864, 94399729, 94399731, 94569729, 154607662, 154607665, 154963139, 154963142, 142420116, 142420118, 143494786, 143494789, 124288388, 124288393, 124304535, 124304536, 129480353, 129480355, 130996129, 130996130, 144884609, 144884611, 144885891, 144913800, 144913801, 122471152, 122471154, 124430991, 124430993, 124958333, 98051910, 98051912, 98545659, 98545660, 124171426, 124171429, 124755788, 124755789, 125211088, 125620771, 125621017, 125633648, 125675295, 125680158, 125681671, 125732489, 125732490, 125864305, 125866523, 125867704, 126010005, 126147752, 126147753, 104764291, 104764293, 105238927, 105238928, 94521881, 94521885, 95163768, 95163769, 150711275, 150711277, 150842057, 150842058, 143989754, 143989757, 144919117, 144919118, 168780745, 168780748, 169715340, 169715342, 124681694, 124694212, 124694301, 124694302, 124701335, 124701449, 124741980, 124741982, 125343222, 125345937, 125429562, 125520925, 125547893, 125553759, 125553760, 106380335, 106446376, 106446377, 106488621, 153243614, 153243616, 153254987, 153254988, 153600027, 153995059, 154054334, 154086605, 154086606, 154087305, 154175096, 154190347, 154190348, 154191552, 154263657, 154381885, 154625348, 154625537, 154625538, 155086707, 116529553, 116529555, 118606005, 118606006, 118925384, 119366925, 136565853, 136565855, 136567637, 136567639, 150709422, 150711952, 150743325, 151950912, 151950913, 152828311, 152828652, 153194215, 139739571, 139739572, 142099096, 142099100, 97707048, 97707051, 97712510, 97712511, 107611129, 107611133, 109067680, 109067682, 100475113, 100475116, 100491523, 100491525, 161162231, 161162234, 161403243, 161403244, 161686553, 152771809, 152771811, 152790422, 152790423, 164525495, 164525497, 166891538, 166891540, 167240988, 167346645, 139850988, 139850990, 140615648, 140615649, 127966000, 127966002, 129614910, 129614912, 129830609, 129989887, 130276917, 168858982, 168858987, 170006154, 170006155, 168197588, 168197591, 169032104, 169032105, 169350297, 153309276, 153447741, 153472082, 153479797, 153506677, 153506678, 128617371, 128617374, 128644920, 128644922, 97465028, 97465030, 98092361, 98092363, 127466184, 127466187, 128876011, 128876012, 129159191, 129188710, 131806006, 131806008, 133736944, 133736945, 133981815, 117629435, 117629439, 117640156, 117640157, 119460754, 119576911, 119655626, 119677029, 119677030, 119706101, 119937634, 119937635, 119938766, 120078934, 120108387, 120148051, 120213623, 120252253, 120252529, 120282409, 120282410, 120332490, 120522476, 120694250, 120890790, 121102069, 121148829, 139651733, 139651736, 148511454, 148511455, 148731539, 148732145, 148935131, 111115582, 111115584, 112164832, 112164833, 115213467, 115213471, 115233607, 115233608, 115683793, 132466480, 132466482, 133263370, 133263371, 93173872, 93173874, 93176105, 93176107, 156103699, 156103702, 156118115, 156118116, 157684000, 157684590, 157684591, 157688879, 157716627, 157725860, 165509108, 165509110, 166074159, 166074160, 130869772, 130869775, 132173805, 132173807, 150113867, 150113871, 150862659, 150862660, 151276889, 151569389, 151694774, 151760784, 151760785, 151774519, 151827016, 151828184, 151828185, 151886518, 151886526, 119568829, 119568831, 120049761, 120049763, 120812060, 145280025, 145280027, 147043737, 147043738, 150832569, 150832571, 151536589, 151536590, 102438275, 102438279, 102462570, 102462571, 92955725, 92955727, 92971885, 92971886, 119020238, 119020243, 119044303, 119044305, 119938543, 119989582, 120475044, 120475728, 120608661, 120780135, 120781487, 120781488, 120781696, 121118875, 121149975, 121152586, 121152588, 121204179, 121396130, 161517307, 161517309, 162039825, 162039826, 116657262, 116657264, 117415820, 117415821, 117865238, 115928755, 115928758, 116151151, 116151152, 116576877, 116745036, 116808702, 116875122, 116893817, 116899474, 116899475, 116961872, 116999242, 117001707, 117001708, 110015572, 110015575, 110051712, 110051713, 138297977, 138297979, 139640580, 139640581, 157160683, 157160685, 157169543, 157169544, 159655024, 128594160, 128594163, 130340194, 130340195, 101975122, 101975124, 103364019, 103364020, 109999560, 109999562, 110019352, 110019353, 97964868, 98107288, 98135446, 98153589, 98153590, 98267336, 98270769, 98270770, 98442391, 98661441, 121415143, 121415146, 121425566, 121425567, 122998103, 142075629, 142075632, 142088121, 142088122, 107514844, 107514846, 108302438, 108302439, 90764816, 90767499, 90769365, 90769366, 90878356, 117894440, 117894444, 118268659, 118268660, 164043965, 164043967, 164058310, 164058311, 164610248, 137774321, 137774325, 139422331, 139422333, 164639328, 164639331, 164642690, 164964314, 164964315, 164995624, 165189275, 137340358, 137340361, 138572959, 138572960, 132448516, 132448518, 132456503, 132456504, 139520796, 139520798, 139522110, 140832111, 140832112, 135474218, 135474221, 135801644, 135801645, 135955159, 106580339, 106580341, 107720008, 107720010, 95272305, 95272310, 95492063, 95492064, 146859078, 146859081, 147701977, 147701978, 127202238, 127202241, 127215397, 127215398, 127738713, 127739090, 127739091, 127751160, 128400278, 128401625, 128430574, 128505966, 128505967, 128507609, 129495187, 129495189, 129509062, 129509063, 147443033, 147443036, 148509516, 148509517, 139768966, 139768970, 141224787, 141224790, 126267314, 126267316, 126304088, 126304090, 128491585, 110511778, 110511780, 111818139, 111818140, 129750121, 129750123, 130401694, 130401695, 130820297, 114348278, 114348281, 115514714, 115514715, 145662417, 145662419, 146260136, 146260137, 168756683, 168756685, 168769878, 168769881, 168805749, 169147282, 167911314, 167911316, 168641597, 168641598, 168992971, 108314950, 108318289, 108345711, 108345713, 109339404, 109646759, 109689290, 109736514, 109765031, 109765032, 109885712, 133552168, 133552358, 133802043, 133802044, 133870301, 135199407, 135199410, 136829317, 136829319, 163627034, 163627038, 163632618, 163632619, 157267425, 157267427, 158150372, 158150373, 146208217, 146208221, 147224885, 147224886, 135048135, 135048137, 135052653, 135052654, 97474742, 97474745, 97809567, 97809568]

    if (str(maade_udsk.values[0]) != 'DØD') & (str(dia_udsk.values[0])[:4] == 'DZ34') : # GynObs behandlingskontakter
        result = 1
    elif (str(maade_udsk.values[0]) != 'DØD') & (BHKID in KIR_BHKIDs_from_SPpull): # Kir behandlingskontakter
        result = 1
    else:
        result = 0

    return result
#=======================================================================================================================
def tjek_for_GI(ptktktype_start,dia_alle,afsnit_alle):
    """
    Tjek indhold af patientkontakt for at bestæmme om der er tale om en genindlæggelse (GI)
    """
    if all([str(dia)[:5] != 'DZ763' for dia in dia_alle.values]) & \
            all([str(dia)[:2] != 'DF' for dia in [dia_alle.values[0],dia_alle.values[-1]]]) & \
            all(['hospice' not in str(afsn).lower() for afsn in afsnit_alle.values]) & \
            all([str(dia)[:2] != 'DC' for dia in dia_alle.values]) & \
            all([str(dia)[:4] != 'DD00' for dia in dia_alle.values]) & \
            all([str(dia)[:4] != 'DD01' for dia in dia_alle.values]) & \
            all([str(dia)[:4] != 'DD02' for dia in dia_alle.values]) & \
            all([str(dia)[:4] != 'DD03' for dia in dia_alle.values]) & \
            all([str(dia)[:4] != 'DD04' for dia in dia_alle.values]) & \
            all([str(dia)[:4] != 'DD05' for dia in dia_alle.values]) & \
            all([str(dia)[:4] != 'DD06' for dia in dia_alle.values]) & \
            all([str(dia)[:4] != 'DD07' for dia in dia_alle.values]) & \
            all([str(dia)[:4] != 'DD08' for dia in dia_alle.values]) & \
            all([str(dia)[:4] != 'DD09' for dia in dia_alle.values]) & \
            all([str(dia)[:4] != 'DO80' for dia in dia_alle.values]) & \
            all([str(dia)[:4] != 'DO81' for dia in dia_alle.values]) & \
            all([str(dia)[:4] != 'DO82' for dia in dia_alle.values]) & \
            all([str(dia)[:4] != 'DO84' for dia in dia_alle.values]) & \
            (str(dia_alle.values[0])[:2] != 'DS'  ) & \
            (str(dia_alle.values[0])[:3] != 'DT1' ) & \
            (str(dia_alle.values[0])[:3] != 'DT2' ) & \
            (str(dia_alle.values[0])[:4] != 'DT30') & \
            (str(dia_alle.values[0])[:4] != 'DT31') & \
            (str(dia_alle.values[0])[:4] != 'DT32') & \
            (str(dia_alle.values[0])[:4] != 'DT33') & \
            (str(dia_alle.values[0])[:4] != 'DT34') & \
            (str(dia_alle.values[0])[:4] != 'DT35') & \
            (str(dia_alle.values[0])[:4] != 'DT51') & \
            (str(dia_alle.values[0])[:4] != 'DT52') & \
            (str(dia_alle.values[0])[:4] != 'DT53') & \
            (str(dia_alle.values[0])[:4] != 'DT54') & \
            (str(dia_alle.values[0])[:4] != 'DT55') & \
            (str(dia_alle.values[0])[:4] != 'DT56') & \
            (str(dia_alle.values[0])[:4] != 'DT57') & \
            (str(dia_alle.values[0])[:4] != 'DT58') & \
            (str(dia_alle.values[0])[:4] != 'DT59') & \
            (str(dia_alle.values[0])[:3] != 'DT6' ) & \
            (str(dia_alle.values[0])[:3] != 'DT7' ) & \
            (str(dia_alle.values[0])[:3] != 'DT9' ) & \
            (str(dia_alle.values[0])[:2] != 'DX'  ) & \
            (str(dia_alle.values[0])[:2] != 'DY'  ):
        result = 1
    else:
        result = 0
    return result
#=======================================================================================================================
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
nowstring   = datetime.datetime.strftime(datetime.datetime.now(),"%d-%m-%Y %H:%M:%S")
todaystring = datetime.datetime.strftime(datetime.date.today(),"%y%m%d")
print("\n\n - Program til indentificering af behandlingskontaktgenindlæggelser startet "+nowstring)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if GUIinput:
    title   = "Personhenførbare data?"
    message = "Skal personhenførbare data inkluderes i outputtet?"
    choices = ["Ja tak", "Nej tak"]
    output  = easygui.ynbox(message, title, choices)
    if output: # Hvis der trykkes Ja
        inkluderpersonoplysninger = True # Tilføj CPR og ID info i output?
    else: # Hvis der trykkes Nej
        inkluderpersonoplysninger = False
else:
    inkluderpersonoplysninger = True
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if GUIinput:
    title="Behandlingskontaktgenindlæggelsesberegner"
    msg = "Identificer Excel datafilen som beregningerne skal baseres på."
    choices = ["Vælg Excel datafil"]
    reply = easygui.buttonbox(msg, title , choices=choices)
    if reply == choices[0]:
        excelfile = easygui.fileopenbox()
    else:
        print(' - fejl i angivelse af Excel fil')
else:
    excelfile = "O:/Administration/02 - Økonomi og PDK/Medarbejdermapper/Kasper/Focus1 - Ad hoc opgaver/Emento app/" \
                "BGI data\BGI datatræk subset til test.xlsx"

outpath = os.path.dirname(excelfile)
print(" - Excel datafil angivet: \n   "+ excelfile)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if GUIinput:
    wintitle   = "Genindlæggelsestidsinterval efter primær indlæggelse"
    wintext    = "Angiv tidsintervallet efter primær indlæggelse, hvori der skal tælles genindlæggelser. Værdier skal angives i timer. \nNationale kriterier: tmin = 0 og tmaks = 720 (30 dage)."
    input_list = ["tmin [timer]", "tmax [timer]"]

    # creating a integer box
    output     = easygui.multenterbox(wintext, wintitle, input_list, values=['0','720'])
    GItimeMin  = float(output[0])    # mindste tid i timer efter primær indlæggelse en genindlæggelse kan registreres
    GItimeMaks = float(output[1])  # maksimale tid i timer efter primær indlæggelse en genindlæggelse kan registreres
else:
    GItimeMin  = 0.0    # mindste tid i timer efter primær indlæggelse en genindlæggelse kan registreres
    GItimeMaks = 720.0  # maksimale tid i timer efter primær indlæggelse en genindlæggelse kan registreres
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# indlæs Excel data i pandas dataframe
print('\n - Indlæser Excel datafil...')
df_kontakter_in = pd.read_excel(excelfile)
print('   Sikrer at sorteringen er CPR > BHK udskrivning > Kontakt start > PTK ID ')
df_kontakter = df_kontakter_in.sort_values(by=["Patient CPR-nr.", "Behandlingskontakt udskrivningsdato Dato-tid", "Kontakt startdato Dato-tid", "Patientkontakt record ID"], ascending=[True, True, True, True]).copy()
df_kontakter = df_kontakter.reset_index(drop=True) # Sikrer at indeks følger sortering
print('   Indlæste dataframe med ' + str(len(df_kontakter)) + ' rækker')

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if GUIinput:
    wintitle   = "Kolonner der skal tilføjes output"
    wintext    = "Angiv kolonner fra input datafil der skal tilføjes outputtet"
    col_list   = df_kontakter.columns

    # creating a multi choice box
    include_col = easygui.multchoicebox(wintext, wintitle, col_list, preselect=None)
else:
    include_col = None
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# definer en række vektorer med indhold til senere brug
uniqueCPR = np.unique(df_kontakter['Patient CPR-nr.'])
uniqueBHKID = np.unique(df_kontakter['Behandlingskontakt record ID'])
udskrivningBHK = df_kontakter['Behandlingskontakt udskrivningsdato Dato-tid']
indlaeggelseBHK = df_kontakter['Behandlingskontakt indlæggelsesdato Dato-tid']
kontaktStart = df_kontakter['Kontakt startdato Dato-tid']

#len(np.where(df_output['Kontakt startdato Dato-tid'] > datetime.datetime.strptime("25-05-2022 00:00:00", "%d-%m-%Y %H:%M:%S"))[0])
#len(np.where(df_kontakter['Behandlingskontakt udskrivningsdato Dato-tid'] > datetime.datetime.strptime("25-05-2022 00:00:00", "%d-%m-%Y %H:%M:%S"))[0])
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# definer output dataframe
outputfilename = 'BGIberegninger'+todaystring+'.xlsx'
#outputfilename = excelfile.replace('.xls','_BGIberegninger'+todaystring+'.xls')
outputdata = {}
NaNlist  = [np.nan] * len(df_kontakter['Hændelsesansvarlig Afsnit navn'])
zerolist = [0] * len(df_kontakter['Hændelsesansvarlig Afsnit navn'])
if inkluderpersonoplysninger:
    outputdata['CPR'] = list(df_kontakter['Patient CPR-nr.'])
    outputdata['PTK ID'] = list(df_kontakter['Patientkontakt record ID'])
    outputdata['BHK ID'] = list(df_kontakter['Behandlingskontakt record ID'])
    outputdata['Indlæggelsesmåde'] = list(df_kontakter['Indlæggelsesmåde navn'])
if include_col is not None:
    for cc, colname in enumerate(include_col):
        outputdata[colname] = list(df_kontakter[colname])
outputdata['Aktionsdiagnose'] = list(df_kontakter['Aktionsdiagnosekode'])
outputdata['Aktionsdiagnose tekst'] = list(df_kontakter['Aktionsdiagnose kodetekst'])
outputdata['Kontakt start'] = list(kontaktStart)
outputdata['Kontakt slut'] = list(df_kontakter['Kontakt slutdato Dato-tid'])
outputdata['Behandlingskontakt indlæggelse'] = list(indlaeggelseBHK)
outputdata['Behandlingskontakt udskrivning'] = list(udskrivningBHK)
outputdata['Hændelsestype'] = list(df_kontakter['Hændelsestype navn'])
outputdata['Hændelsesansvarlig overafdeling'] = list(df_kontakter['Hændelsesansvarlig Overafdeling navn'])
outputdata['Hændelsesansvarligt afsnit'] = list(df_kontakter['Hændelsesansvarlig Afsnit navn'])

# lav ny kolonne der erstatter "SJ SLAGELSE MODTAGELSE" med SLAAKI1 og SLAAKI2 navne fra kontakt afsnit
outputdata['Ansvarligt afsnit'] = [np.nan] * len(df_kontakter['Hændelsesansvarlig Afsnit navn'])

for hh, hafsn in enumerate(df_kontakter['Hændelsesansvarlig Afsnit navn']):
    if ('SJ SLAGELSE MOD' in hafsn):
        outputdata['Ansvarligt afsnit'][hh] = df_kontakter['Kontaktansvar Afsnit navn'][hh]
    else:
        outputdata['Ansvarligt afsnit'][hh] = hafsn

outputdata['Ansvarligt afsnit'] = np.asarray(outputdata['Ansvarligt afsnit'])

outputdata['Primærindlæggelse'] = zerolist

# Defniner kort-navne og lave de tomme kolonner der skal fyldes i outputtabellen
unique_overafd     = np.unique(df_kontakter['Hændelsesansvarlig Overafdeling navn'])
unique_overafd_NSR = []
shortnames_overafd = {}
for oo, overafd in enumerate(unique_overafd):
    shortnames_overafd[overafd] = overafd.split(' - ')[0].split(', ')[-1]
    if ('SLA ' in overafd) or ('NAE ' in overafd):
        outputdata['Genindlæggelse fra overafd. '+shortnames_overafd[overafd]] = NaNlist
        outputdata['PI for GI fra ' + shortnames_overafd[overafd]] = NaNlist
        unique_overafd_NSR.append(overafd)

unique_afsn     = np.unique(outputdata['Ansvarligt afsnit'])

unique_afsn_NSR = []
shortnames_afsn = {}
for aa, afsn in enumerate(unique_afsn):
    shortnames_afsn[afsn] = afsn.split(', ')[0]
    if ('SJ SLA' in afsn) or ('SJ NAE' in afsn):
        outputdata['Genindlæggelse fra afsn. '+shortnames_afsn[afsn]] = NaNlist
        outputdata['PI for GI fra ' + shortnames_afsn[afsn]] = NaNlist
        outputdata['PIDIA for GI fra ' + shortnames_afsn[afsn]] = NaNlist
        unique_afsn_NSR.append(afsn)

df_output = pd.DataFrame(outputdata)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Løkke over behandlingskontakter for at bestæmme primærindlæggelser
print('\n - Identificerer primærindlæggelser')
for bb, bid in enumerate(uniqueBHKID):
    infostr = '   Evaluerer udskrivende afsnit af behandlingskontakt ' + str(bb + 1) + ' / ' + str(len(uniqueBHKID))
    sys.stdout.write("%s\r" % infostr)
    sys.stdout.flush()

    # Vælger sidste (udskrivende) patientkontakt i behandlingskontakt
    ent_ptk_alle = np.where((df_kontakter['Behandlingskontakt record ID'] == bid))[0]
    ent_ptk_udsk = np.where((df_kontakter['Behandlingskontakt record ID'] == bid) & (df_kontakter['Hændelsestype navn'] == 'UDSKRIVNING'))[0]

    if len(ent_ptk_udsk) > 1: # Hvis der er mere end en udskrivning per behandlingskontakt bruges den seneste
        ent_seneste = np.where(df_kontakter['Kontakt slutdato Dato-tid'][ent_ptk_udsk] == np.max(df_kontakter['Kontakt slutdato Dato-tid'][ent_ptk_udsk]))[0]
        ent_ptk_udsk = ent_ptk_udsk[ent_seneste]

    # Kun tjek for primærindlæggelser for udskrivende overafdelinger på NSR
    if df_output['Ansvarligt afsnit'][ent_ptk_udsk].values in unique_afsn_NSR:
        isPI = tjek_for_PI(df_kontakter['Aktionsdiagnosekode'][ent_ptk_udsk], df_kontakter['Afslutningsmåde navn'][ent_ptk_udsk], bid)
        df_output['Primærindlæggelse'][ent_ptk_udsk] = isPI

print('\n - Færdig med evaluering af alle '+str(len(uniqueBHKID))+' behandlingskontakter')
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Løkke over patienter for at evaluere dem med henblik på genindlæggelser
print('\n - Identificerer behandlingskontaktgenindlæggelser')
for cc, cpr in enumerate(uniqueCPR):
    infostr = '   Evaluerer forløbene for patient ' + str(cc + 1) + ' / ' + str(len(uniqueCPR))
    sys.stdout.write("%s\r" % infostr)
    sys.stdout.flush()

    ent_cpr = np.where(df_kontakter['Patient CPR-nr.'] == cpr)[0]
    u_BHKID = np.unique(df_kontakter['Behandlingskontakt record ID'][ent_cpr])

    if len(u_BHKID) > 1:  # kun tjek genindlæggelser for patienter med mere end een behandlingskontakt
        ent_PI = np.where((df_kontakter['Patient CPR-nr.'] == cpr) & (df_output['Primærindlæggelse'] == 1))[0]
        #u_PIafsnit, ent_PIafsnit = np.unique(df_output['Ansvarligt afsnit'][ent_PI], return_index=True)
        u_PIafsnit = np.unique(df_output['Ansvarligt afsnit'][ent_PI])

        for aa, PIafs in enumerate(u_PIafsnit):
            #PIoverafd = df_kontakter['Hændelsesansvarlig Overafdeling navn'][ent_PI].values[ent_PIafsnit][0]

            for ee, ent_ktk in enumerate(ent_cpr): # løkke over alle patientkontakter for givent CPR nummer
                # Find afsnit for alle kontakter markeret som primærindlæggelser for givent CPR nummer
                ent_forPIogAfsnit = np.where((df_kontakter['Patient CPR-nr.'] == cpr) & (df_output['Primærindlæggelse'] == 1) & (df_output['Ansvarligt afsnit'] == PIafs))[0]

                if len(ent_forPIogAfsnit) > 0: # Kun check for genindlæggelser hvis CPR har primærindlæggelse på afsnittet PIafs
                    PIoverafd         = np.unique(df_kontakter['Hændelsesansvarlig Overafdeling navn'][ent_forPIogAfsnit])  # Overafdeling for PI kontakter
                    PIdia             = np.asarray(df_kontakter['Aktionsdiagnosekode'][ent_forPIogAfsnit])  # Aktionsdiagnoser for PI kontakter

                    if len(PIoverafd) > 1: # Der burde kun være en unik overafdeling på dette tidspunkt, så advar hvis det ikke er tilfældet
                        print(' - ADVARSEL: For patientkontakt '+str(ent_ktk)+' var der '+str(len(PIoverafd))+' forskellige overafdelinger; bruger den første')
                    PIoverafd = PIoverafd[0]

                    BHKforPIogAfsnit  = df_kontakter['Behandlingskontakt record ID'][ent_forPIogAfsnit]
                    diffPItider       = (indlaeggelseBHK[ent_ktk] - udskrivningBHK[ent_forPIogAfsnit]) / np.timedelta64(1,'h')

                    if any((GItimeMin < diffPItider) & (diffPItider < GItimeMaks ) & (df_kontakter['Behandlingskontakt record ID'][ent_ktk] != BHKforPIogAfsnit)):
                        #ent_BHKID_alle = df_kontakter['Behandlingskontakt record ID'][ent_cpr]
                        ent_ptk_alle   = np.where(df_kontakter['Behandlingskontakt record ID'] == df_kontakter['Behandlingskontakt record ID'][ent_ktk])[0]

                        # df_kontakter['Aktionsdiagnosekode'][ent_ktk]
                        isGI = tjek_for_GI(df_kontakter['Indlæggelsesmåde navn'][ent_ptk_alle].values[0],
                                           df_kontakter['Aktionsdiagnosekode'][ent_ptk_alle],
                                           df_kontakter['Hændelsesansvarlig Overafdeling navn'][ent_ptk_alle])

                        df_output['Genindlæggelse fra afsn. ' + shortnames_afsn[PIafs]][ent_ktk] = isGI
                        df_output['Genindlæggelse fra overafd. ' + shortnames_overafd[PIoverafd]][ent_ktk] = isGI
                        if isGI == 1:
                            df_output['PI for GI fra ' + shortnames_afsn[PIafs]][ent_ktk] = PIafs
                            df_output['PI for GI fra ' + shortnames_overafd[PIoverafd]][ent_ktk] = PIoverafd

                            ent_senestePIdia = np.where((diffPItider[diffPItider > 0]) == np.min(diffPItider[diffPItider > 0])) # index for seneste PIs diagnose før geninglæggelsen
                            df_output['PIDIA for GI fra ' + shortnames_afsn[PIafs]][ent_ktk] = PIdia[ent_senestePIdia][0]

print('\n - Færdig med evaluering af all '+str(len(uniqueCPR))+' patienter')
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
print('\n - Sikrer at der for hvert behandlingskontakt ID kun er 1 genindlæggelsesflag per overafdeling og afsnit')
for bb, BHKID in enumerate(uniqueBHKID):
    infostr = '   Korrigerer genindlæggelsesflag for ID ' + str(bb + 1) + ' / ' + str(len(uniqueBHKID))
    sys.stdout.write("%s\r" % infostr)
    sys.stdout.flush()
    ent_BHKID_alle = np.where(df_kontakter['Behandlingskontakt record ID'] == BHKID)[0]

    for oo, overafd in enumerate(unique_overafd_NSR):
        if any(df_output['Genindlæggelse fra overafd. ' + shortnames_overafd[overafd]][ent_BHKID_alle] == 1):
            BHKI_overafd = np.unique(df_output['Hændelsesansvarlig overafdeling'][ent_BHKID_alle])
            for bo, bhk_overafd in enumerate(BHKI_overafd):
                ent_BHK_overafd = np.where((df_output['Hændelsesansvarlig overafdeling'] == bhk_overafd) &
                                           (df_kontakter['Behandlingskontakt record ID'] == BHKID))[0]
                selection = (df_output['Genindlæggelse fra overafd. ' + shortnames_overafd[overafd]][ent_BHK_overafd] != 1)

                # Erstat værdier der ikke matcher 'selection' ovenfor; så find GI flag og erstat dem.
                df_output['Genindlæggelse fra overafd. ' + shortnames_overafd[overafd]][ent_BHK_overafd] = \
                    df_output['Genindlæggelse fra overafd. ' + shortnames_overafd[overafd]][ent_BHK_overafd].where( selection , 0)  # replace values not matching selection
                df_output['PI for GI fra ' + shortnames_overafd[overafd]][ent_BHK_overafd] = \
                    df_output['PI for GI fra ' + shortnames_overafd[overafd]][ent_BHK_overafd].where( selection, 'Udeladt') # replace values not matching selection

                # Erstat første GI flag så det kun er registreret en gang per BHKID
                df_output['Genindlæggelse fra overafd. ' + shortnames_overafd[overafd]][ent_BHK_overafd[0]] = 1
                df_output['PI for GI fra ' + shortnames_overafd[overafd]][ent_BHK_overafd[0]] = overafd

    for aa, afsn in enumerate(unique_afsn_NSR):
        if any(df_output['Genindlæggelse fra afsn. ' + shortnames_afsn[afsn]][ent_BHKID_alle] == 1):
            BHKI_afsn = np.unique(df_output['Hændelsesansvarligt afsnit'][ent_BHKID_alle])
            for bo, bhk_afsn in enumerate(BHKI_afsn):
                ent_BHK_afsn = np.where((df_output['Hændelsesansvarligt afsnit'] == bhk_afsn) &
                                           (df_kontakter['Behandlingskontakt record ID'] == BHKID))[0]
                selection = (df_output['Genindlæggelse fra afsn. ' + shortnames_afsn[afsn]][ent_BHK_afsn] != 1)

                # Erstat værdier der ikke matcher 'selection' ovenfor; så find GI flag og erstat dem.
                df_output['Genindlæggelse fra afsn. ' + shortnames_afsn[afsn]][ent_BHK_afsn] = \
                    df_output['Genindlæggelse fra afsn. ' + shortnames_afsn[afsn]][ent_BHK_afsn].where( selection , 0)  # replace values not matching selection
                df_output['PI for GI fra ' + shortnames_afsn[afsn]][ent_BHK_afsn] = \
                    df_output['PI for GI fra ' + shortnames_afsn[afsn]][ent_BHK_afsn].where( selection, 'Udeladt') # replace values not matching selection

                # Erstat første GI flag så det kun er registreret en gang per BHKID
                df_output['Genindlæggelse fra afsn. ' + shortnames_afsn[afsn]][ent_BHK_afsn[0]] = 1
                df_output['PI for GI fra ' + shortnames_afsn[afsn]][ent_BHK_afsn[0]] = afsn

print('\n - Færdig med korrigering af flag')
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
print('\n - Tilføjer kolonner med samlet sum af genindlæggelser')
df_output['Genindlæggelse afsnit total (sum)'] = df_output.loc[:, [cc for cc in df_output.columns if cc.startswith('Genindlæggelse fra afsn.')]].sum(axis=1)
ent_lt0 = (df_output['Genindlæggelse afsnit total (sum)'] < 1)
df_output['Genindlæggelse afsnit optælling'] = df_output['Genindlæggelse afsnit total (sum)'].where( ent_lt0 , 1)  # replace values not matching ent_lt0 with 1

df_output['Genindlæggelse overafdeling total (sum)'] = df_output.loc[:, [cc for cc in df_output.columns if cc.startswith('Genindlæggelse fra overafd.')]].sum(axis=1)
ent_lt0 = (df_output['Genindlæggelse overafdeling total (sum)'] < 1)
df_output['Genindlæggelse overafdeling optælling'] = df_output['Genindlæggelse overafdeling total (sum)'].where( ent_lt0 , 1)  # replace values not matching ent_lt0 with 1

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
print('\n - Opretter kolonne der markerer behandlingskontrakt IDer med genindlæggelse')
df_output['Behandlingskontakter med mindst en genindindlæggelse'] = zerolist
for bb, BHKID in enumerate(uniqueBHKID):
    infostr = '   Checker ID ' + str(bb + 1) + ' / ' + str(len(uniqueBHKID))
    sys.stdout.write("%s\r" % infostr)
    sys.stdout.flush()

    ent_BHKID_alle = np.where(df_kontakter['Behandlingskontakt record ID'] == BHKID)[0]

    ent_BHKID_udskrivning = np.where((df_kontakter['Behandlingskontakt record ID'] == BHKID) & (df_kontakter['Hændelsestype navn'] == 'UDSKRIVNING'))[0]

    if any(df_output['Genindlæggelse overafdeling optælling'][ent_BHKID_alle] == 1):
        df_output['Behandlingskontakter med mindst en genindindlæggelse'][ent_BHKID_udskrivning[-1]] = 1

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
print('\n - Gemmer output dataframe til Excelfil')

if inkluderpersonoplysninger:
    print('   Sikrer at sorteringen er CPR > BHK udskrivning > Kontakt start')
    df_output = df_output.sort_values(by=['CPR','Behandlingskontakt udskrivning', 'Kontakt start'], ascending=[True, True, True])
else:
    print('   Sikrer at sorteringen er BHK udskrivning > Kontakt start')
    df_output = df_output.sort_values(by=['Behandlingskontakt udskrivning','Kontakt start'], ascending=[True, True])

df_output.to_excel(outpath+'/'+outputfilename, sheet_name="data output")

print('\n - Output gemt i mappen '+outpath+'/')
print('   med filnavnet '+outputfilename+'\n')
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
loggingfile = outpath+'/'+outputfilename.replace('.xlsx','_log.txt')
print(" - Skriver stats til filen "+loggingfile)
fout = open(loggingfile, 'w')
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
fout.write("\n - Program til indentificering af behandlingskontaktgenindlæggelser startet "+nowstring)
fout.write('\n\n - Output gemt i mappen '+outpath+'/')
fout.write('\n   med filnavnet '+outputfilename+'\n')

inputfile = os.path.basename(excelfile)
fout.write('\n - Indholdet i det beregnede output er baseret på filen '+inputfile)
fout.write('\n   som ligger i mappen '+outpath+'/\n')
fout.write('\n - Den gemte output ful indeholder indeholdere: ')
fout.write('\n    o Antal primærindlæggelser (total)                                 = '+str("%12.2f" % df_output['Primærindlæggelse'].sum())+ ' (ud af '+str(len(uniqueBHKID))+' BHKIDer)')
fout.write('\n    o Antal behandlingskontakter med mindst en genindlæggelse (total)  = '+str("%12.2f" % df_output['Behandlingskontakter med mindst en genindindlæggelse'].sum())+ ' (ud af '+str(len(uniqueBHKID))+' BHKIDer)')
fout.write('\n    o Behandlingskontagenindlæggelser på afsnitsniveau (total)         = '+str("%12.2f" % df_output['Genindlæggelse afsnit optælling'].sum()))
fout.write('\n    o Behandlingskontagenindlæggelser på overafdelingsniveu (total)    = '+str("%12.2f" % df_output['Genindlæggelse overafdeling optælling'].sum())+'\n')

for oo, overafd in enumerate(unique_overafd_NSR):
    fout.write(('\n    o Behandlingskontagenindlæggelser fra overafd. ' + shortnames_overafd[overafd]).ljust(100)+' = ' +
          str("%12.2f" % df_output['Genindlæggelse fra overafd. ' + shortnames_overafd[overafd]].sum()))

for aa, afsn in enumerate(unique_afsn_NSR):
    fout.write(('\n    o Behandlingskontagenindlæggelser fra afsn. ' + shortnames_afsn[afsn]).ljust(100)+' = ' +
          str("%12.2f" % df_output['Genindlæggelse fra afsn. ' + shortnames_afsn[afsn]].sum()))

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
nowstring   = datetime.datetime.strftime(datetime.datetime.now(),"%d-%m-%Y %H:%M:%S")
todaystring = datetime.datetime.strftime(datetime.date.today(),"%y%m%d")
print("\n\n - Program til indentificering af behandlingskontaktgenindlæggelser sluttede "+nowstring)
fout.write("\n\n - Program til indentificering af behandlingskontaktgenindlæggelser sluttede "+nowstring)
#=======================================================================================================================
fout.close() # closing log file
print("\n - Log er gemt. Afslutter om ", end='')
for ii in range(0,10):
    sleep(0.25)
    print(str(10-ii)+' ', end='')
print(' --->')
#=======================================================================================================================

